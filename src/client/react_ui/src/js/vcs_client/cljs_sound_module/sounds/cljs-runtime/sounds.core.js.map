{"version":3,"sources":["sounds/core.cljs"],"mappings":"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","names":["sounds.core/log","cljs.core/println","sounds.core/root","sounds.core/alpha-to-midi-table","sounds.core/alpha-to-midi","alpha","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","letter","cljs.core/first","octave","cljs.core/second","fexpr__6047","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","mod","cljs.core/last","fexpr__6048","sounds.core/midi-to-freq","midi","fexpr__6049","sounds.midi-freq/midi-to-freq","p__6050","map__6051","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","sounds.core/OSC","type","freq","gain","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","or__4131__auto__","sounds.core/a","sounds.core/set-type","OSC","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","sounds.core/set-freq","sounds.core/set-gain","sounds.core/play-OSC","map__6053","cljs.core/deref","sound","js/sounds","sounds.core/stop-OSC","temp__5718__auto__","instance","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","sounds.core/play-stop","dur","js/setTimeout","sounds.core/play-freq","sounds.core/play-note","note","sounds.core/_play-note","sounds.core/scale-to-midi","arr","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","sounds.core/parse-note","components","clojure.string.split.cljs$core$IFn$_invoke$arity$2","value","octave-shift","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","modifier","modifier-offset","key","base-offset","sounds.core/scales","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/str","sounds.core/rand-scale","scale","cljs.core/rand-nth","sounds.core/interval","fxn","int","js/setInterval","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","sounds.core/play-notes","p__6059","map__6060","seq6055","G__6056","cljs.core/next","G__6057","G__6058","self__4717__auto__","notes","base-note","seq__6062","cljs.core/seq","chunk__6063","count__6064","i__6065","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","new-OSC","sounds.core/play-notes-delay","p__6072","map__6073","seq6067","G__6068","G__6069","G__6070","G__6071","osc","delay","num-notes","delays","p1__6066#","cljs.core.range.cljs$core$IFn$_invoke$arity$1","n__4607__auto__","i","sounds.core.play_notes.cljs$core$IFn$_invoke$arity$variadic","sounds.core/feedback-key","sounds.core/success","sounds.core/fifth","sounds.core/cadence","sounds.core.play_notes_delay.cljs$core$IFn$_invoke$arity$variadic","sounds.core/continue","sounds.core/error","sounds.core/ready-for-input","sounds.core/unrecognized","sounds.core/audio-feedback","sounds.core/make-melody","num","tick-size","max-ticks","melody","elapsed","p1__6075#","cljs.core/Keyword","next-delay","total-delay","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","current","cljs.core.print.cljs$core$IFn$_invoke$arity$variadic","sounds.core/shift-range","max","offset","map-inc","rge","incr","p1__6076#","sounds.core/get-rand-key","octave-range","first-part","sounds.core/play-rand-pent","k","sounds.core/play-rand-song","total-time","sounds.core/play-rand-song-with","sounds.core/master-tick","p__6077","map__6078","sounds.core/configure-beat","bpm","divisor"],"sourcesContent":[";;Thu Sep  1 16:49:44 CDT 2016\n(ns sounds.core\n  (:require [cljs.reader :as reader]\n            [sounds.midi-freq :as midi-freq]))\n\n(def log println)\n\n(def root 60) ;;defining \n\n(def alpha-to-midi-table\n  { \n   :c 0\n   :d 2\n   :e 4\n   :f 6\n   :g 8\n   :a 10 \n   :b 12 \n   } \n) \n\n\n(defn alpha-to-midi [alpha]\n  \"turns a#4 into midi number\" \n  (if (= 2 (count alpha))\n    (let [letter (first alpha)\n          octave (second alpha)]\n      (+ ( ( keyword letter) alpha-to-midi-table) (* 12 octave)))\n    ;;if not two then we assume three\n    (let [letter (first alpha)\n          mod (cond \n                (= (second alpha) \"#\") 1\n                (= (second alpha) \"b\") -1)\n          octave (last alpha)]\n      (+ mod ((keyword letter) alpha-to-midi-table) (* 12 octave)))))\n\n(defn midi-to-freq [midi]\n  ( (keyword (str midi)) midi-freq/midi-to-freq ))\n\n(defn OSC [{:keys [type freq gain]}]\n  (atom \n   {:type (or type \"sine\")\n    :freq (cond\n            freq (cond\n                   (string? freq) (-> freq \n                                      alpha-to-midi\n                                      midi-to-freq)\n                   :default freq)\n            :default 440)\n    :gain (or gain 0.25)\n    :default-dur 2000}))\n\n(def a midi-freq/midi-to-freq)\n\n(defn set-type [OSC type]\n  (swap! OSC assoc :type type))\n\n(defn set-freq [OSC freq]\n  (swap! OSC assoc :freq freq))\n\n(defn set-gain [OSC gain]\n  (swap! OSC assoc :gain gain))\n\n(defn play-OSC [OSC]\n  (let [{:keys [type freq gain]} @OSC\n        sound (.osc js/sounds type freq gain)]\n    (swap! OSC assoc :instance sound)))\n\n(defn stop-OSC [OSC]\n  (if-let [instance (:instance @OSC)]\n    (do\n      (.stop instance)\n      (swap! OSC dissoc :instance))\n    (log \"OSC was not playing!\")))\n\n\n(defn play-stop [OSC dur]\n  (play-OSC OSC)\n  (js/setTimeout #(stop-OSC OSC) dur ))\n\n(defn play-freq\n  [OSC freq dur]\n  (set-freq OSC freq)\n  (play-stop OSC dur))\n\n(defn play-note \n  [OSC note dur]\n  (play-freq OSC (-> note alpha-to-midi midi-to-freq) dur))\n\n(defn _play-note  [note]\n  (play-note (OSC {}) note 200))\n  \n(defn scale-to-midi [note] \n  \"This function maps the scale off sets (scale number) to the midi offsets (chromatic)\n   This returns the number to add to the root midi note\" \n  (let [ arr [nil 0 2 4 5 7 9 11 12] ] \n    (nth arr note)))\n\n\n\n(defn parse-note [note] \n  \"This turns a note of the form b5.1 or #7.-2 into a midi (chromatic) offset \" \n  (let [components (clojure.string/split note #\"\\.\")\n        value (first components)\n        octave-shift (cond \n                       (> (count components) 1) (reader/read-string (str (last components)))\n                       :default 0)\n        modifier (cond \n                   (> (count value) 1) (first value)\n                   :default nil)\n        modifier-offset (cond \n                          (= \\b modifier) -1 \n                          (= \\# modifier) 1  \n                          :default 0)\n        key (reader/read-string (or \n                                      (str (last value))\n                                      (value)))\n        ;;_ (log key)\n        base-offset (scale-to-midi key)]\n    (+ base-offset modifier-offset (* 12 octave-shift))))\n\n\n\n\n(def scales \n  {\n   :pentatonic (map str [1 2 3 5 6])\n   :minor-pentatonic (map str [1 \"b3\" 4 5 \"b7\"])\n   :minor (map str [1 2 \"b3\" 4 5 \"b6\" \"b7\"])\n   :harmonic-minor (map str [1 2 \"b3\" 4 5 \"b6\" 7])\n  }\n)\n\n(defn rand-scale [key]\n  (let [scale (key scales)]\n    (rand-nth scale)))\n\n(defn interval [fxn int]\n  (js/setInterval fxn int))\n\n  \n\n;; FIGURE OUT THE ISSUE OF PLAYING MULTI NOTES SIMULTANEOUSLY\n\n(defn play-notes [OSC notes dur & {:keys [key]}]\n  (let [base-note (cond \n                      key (alpha-to-midi key)\n                      :default root)]\n    (doseq [note notes]\n      (let [midi (+ base-note (parse-note note) ) \n            freq (midi-to-freq midi)\n            new-OSC (atom @OSC)]\n        (play-freq new-OSC freq dur)))))\n\n(defn play-notes-delay [osc notes dur delay & {:keys [key]}]\n  (let [num-notes (count notes)\n        delays (map #(* delay %) (range num-notes))]\n    (dotimes [i num-notes]\n      (js/setTimeout #(play-notes osc [(nth notes i)] dur :key key) (nth delays i)))))\n\n\n(def feedback-key \"e5\") \n  \n;; now we can make functions for providing feedback\n(defn success []\n  (play-notes (OSC {}) [\"1\" \"3\"] 200 :key feedback-key))\n\n\n(defn fifth []\n  (play-notes (OSC {}) [\"1\" \"5\"] 200 :key feedback-key))\n\n(defn cadence []\n  (play-notes-delay (OSC {}) [\"1\" \"5.-1\"] 100 100 :key feedback-key))\n\n(defn continue []\n  (play-notes (OSC {}) [\"5.-1\"] 100 :key feedback-key))\n\n(defn error []\n  (play-notes (OSC {}) [\"1\" \"b3\"] 200 :key feedback-key))\n\n(defn ready-for-input []\n  (play-notes-delay (OSC {}) [\"1\" \"3\"] 100 100 :key feedback-key))\n\n(defn unrecognized []\n  (play-notes (OSC {}) [\"1\" \"b5\"] 200 :key feedback-key))\n\n(def audio-feedback\n  {\n   :success success\n   :continue continue\n   :error   error\n   :ready-for-input ready-for-input \n   :unrecognized unrecognized\n   }\n)\n\n\n;; We will have a function make melody \n;; you specify the number of notes you want, and the tick size (as well as max number of ticks between notes\n;; an atom is returned such that it contains the setTimeout for each note that \n;; will be played \n\n;; when an timeout matures then it will drop the oldest interval from the atom (its own)\n\n;; to stop the melody  you can map clearInterval through the atom \n\n(defn make-melody [num tick-size max-ticks scale key] \n  (let [melody (atom [])\n        elapsed (atom 0) \n        delays (map #(* (inc %) tick-size) (range max-ticks))\n        notes (cond\n                (keyword? scale) (scale scales)\n                :default scale)]\n    (dotimes [i num]\n      (let [next-delay (rand-nth delays)\n            total-delay (+ next-delay @elapsed)]\n        (swap! elapsed (fn [current] (+ current next-delay)))\n        (print total-delay)\n        (js/setTimeout #(play-notes (OSC {}) [(rand-nth notes)] 200 :key key) total-delay)))\n    @elapsed))\n\n(defn shift-range [max offset]\n  (let [map-inc (fn [rge incr] (map #(+ % incr) rge))]\n    (map-inc (range max) offset)))\n        \n(defn get-rand-key [octave-range]\n  (let [first-part (rand-nth [\"c\" \"d\" \"e\" \"f\" \"g\" \"a\" \"b\" \"c\"])\n        modifier   (rand-nth [\"#\" \"b\"])\n        octave     (rand-nth (shift-range octave-range 3))]\n    (str first-part modifier octave)))\n\n(defn play-rand-pent [k]\n  (play-notes (OSC {}) [(rand-nth (:pentatonic scales))] 200 :key k))\n\n(defn play-rand-song [] \n  (let [key (get-rand-key 3)\n        total-time (make-melody 20 300 2 :pentatonic key ) ;;this function starts the melody \n        osc (OSC {:freq key})]\n    (play-stop osc total-time))) ;;this plays bass note\n      \n    \n    \n(defn play-rand-song-with [k] \n  (let [key (get-rand-key 3)\n        total-time (make-melody 20 300 2 k key ) ;;this function starts the melody \n        osc (OSC {:freq key})]\n    (play-stop osc total-time))) ;;this plays bass note\n\n\n\n\n\n\n\n\n\n\n;; ------------------------- TIMER LOGIC  ---------------\n\n;; timer is just a software clock ticking away.. after being configure it will tick at a\n;; constant rate defined by (bpm/60)/divisor \"TICKS\" per second \n;; each time it ticks... it will call a handler function to process all the virtual notes\n;; which are in memory\n\n;; VIRTUAL NOTES (henceforth v-notes) \n;; lets say you want to play a note at the start of 2 measures from now ..\n;; and have it repeat every measure after that for 10 measures\n;; (send-to-master {\n;;                  :class \"measure\"\n;;                  :delay 2 \n;;                  :interval 1\n;;                  :life 10  ;; life will decrement every time the v-note is processed\n;;                            ;; !! PROVIDED that delay is nil (else delay is decremented) \n;;                  :note \"Ab.2\"\n;;                  :OSC (OSC \"sine\") ;; need to implement this arity \n;;                  }) \n\n\n;; classes\n;; So.. basically there are N ticks in a measure where N is equal to divisor\n;; each time that the the processor process a tick it will increment the master tick atom\n;; (when (= @master-tick divisor)\n;;   (reset! master-tick 1))\n;; this code should be run @ the end of the processing cycle!\n\n;; SO! in order to improve the performace of this code... as soon as all of the notes are\n;; dispatched for a given tick.. the processing for the next tick should occur...\n;; and it should return an object which JUST contains which notes should be PLAYED...\n;; THEN, when the tick actually occurs this object is used to play the notes\n;; kiiara gold \n\n\n(def master-tick (atom 1))\n\n;; two ways to trigger notes\n;; 1. @ next _specify_tick_class_here (repeat n times)\n;; 2. @ \n\n(defn configure-beat [{:keys [bpm divisor]}]\n  \"This will call the 'trigger pending\"\n  )\n\n\n\n\n    \n\n\n\n\n\n\n\n  \n  \n"]}