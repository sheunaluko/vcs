["^ ","~:output",["^ ","~:js","goog.provide('knowledge_graph.core');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('clojure.set');\ngoog.require('cljs.core.async');\n/**\n * @param {...*} var_args\n */\nknowledge_graph.core.m_log = (function() { \nvar knowledge_graph$core$m_log__delegate = function (args){\nvar msg = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"[kg]:: \"], null),args));\nreturn console.log(msg);\n};\nvar knowledge_graph$core$m_log = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__35062__i = 0, G__35062__a = new Array(arguments.length -  0);\nwhile (G__35062__i < G__35062__a.length) {G__35062__a[G__35062__i] = arguments[G__35062__i + 0]; ++G__35062__i;}\n  args = new cljs.core.IndexedSeq(G__35062__a,0,null);\n} \nreturn knowledge_graph$core$m_log__delegate.call(this,args);};\nknowledge_graph$core$m_log.cljs$lang$maxFixedArity = 0;\nknowledge_graph$core$m_log.cljs$lang$applyTo = (function (arglist__35063){\nvar args = cljs.core.seq(arglist__35063);\nreturn knowledge_graph$core$m_log__delegate(args);\n});\nknowledge_graph$core$m_log.cljs$core$IFn$_invoke$arity$variadic = knowledge_graph$core$m_log__delegate;\nreturn knowledge_graph$core$m_log;\n})()\n;\nknowledge_graph.core.verbose = true;\nknowledge_graph.core.log = (function knowledge_graph$core$log(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___35064 = arguments.length;\nvar i__4790__auto___35065 = (0);\nwhile(true){\nif((i__4790__auto___35065 < len__4789__auto___35064)){\nargs__4795__auto__.push((arguments[i__4790__auto___35065]));\n\nvar G__35066 = (i__4790__auto___35065 + (1));\ni__4790__auto___35065 = G__35066;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((0) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((0)),(0),null)):null);\nreturn knowledge_graph.core.log.cljs$core$IFn$_invoke$arity$variadic(argseq__4796__auto__);\n});\n\n(knowledge_graph.core.log.cljs$core$IFn$_invoke$arity$variadic = (function (stuff){\nif(knowledge_graph.core.verbose){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(knowledge_graph.core.m_log,stuff);\n} else {\nreturn null;\n}\n}));\n\n(knowledge_graph.core.log.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(knowledge_graph.core.log.cljs$lang$applyTo = (function (seq34897){\nvar self__4777__auto__ = this;\nreturn self__4777__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34897));\n}));\n\nknowledge_graph.core.node_store = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nknowledge_graph.core.get_node = (function knowledge_graph$core$get_node(id){\nvar G__34898 = cljs.core.deref(knowledge_graph.core.node_store);\nreturn (id.cljs$core$IFn$_invoke$arity$1 ? id.cljs$core$IFn$_invoke$arity$1(G__34898) : id.call(null,G__34898));\n});\nknowledge_graph.core.get_node_outs = (function knowledge_graph$core$get_node_outs(id){\nreturn new cljs.core.Keyword(null,\"outs\",\"outs\",729500157).cljs$core$IFn$_invoke$arity$1(knowledge_graph.core.get_node(id));\n});\nknowledge_graph.core.new_node = (function knowledge_graph$core$new_node(){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"outs\",\"outs\",729500157),cljs.core.PersistentHashSet.EMPTY], null);\n});\nknowledge_graph.core.add_node = (function knowledge_graph$core$add_node(id){\nvar node = knowledge_graph.core.new_node();\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(knowledge_graph.core.node_store,cljs.core.assoc,id,node);\n});\nknowledge_graph.core.node_exists_QMARK_ = (function knowledge_graph$core$node_exists_QMARK_(id){\nif(cljs.core.truth_(knowledge_graph.core.get_node(id))){\nreturn true;\n} else {\nreturn false;\n}\n});\nknowledge_graph.core.ensure_node = (function knowledge_graph$core$ensure_node(id){\nif((!(knowledge_graph.core.node_exists_QMARK_(id)))){\nreturn knowledge_graph.core.add_node(id);\n} else {\nreturn null;\n}\n});\nknowledge_graph.core.ensure_nodes = (function knowledge_graph$core$ensure_nodes(ids){\nvar seq__34899 = cljs.core.seq(ids);\nvar chunk__34900 = null;\nvar count__34901 = (0);\nvar i__34902 = (0);\nwhile(true){\nif((i__34902 < count__34901)){\nvar id = chunk__34900.cljs$core$IIndexed$_nth$arity$2(null,i__34902);\nknowledge_graph.core.ensure_node(id);\n\n\nvar G__35067 = seq__34899;\nvar G__35068 = chunk__34900;\nvar G__35069 = count__34901;\nvar G__35070 = (i__34902 + (1));\nseq__34899 = G__35067;\nchunk__34900 = G__35068;\ncount__34901 = G__35069;\ni__34902 = G__35070;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__34899);\nif(temp__5735__auto__){\nvar seq__34899__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__34899__$1)){\nvar c__4609__auto__ = cljs.core.chunk_first(seq__34899__$1);\nvar G__35071 = cljs.core.chunk_rest(seq__34899__$1);\nvar G__35072 = c__4609__auto__;\nvar G__35073 = cljs.core.count(c__4609__auto__);\nvar G__35074 = (0);\nseq__34899 = G__35071;\nchunk__34900 = G__35072;\ncount__34901 = G__35073;\ni__34902 = G__35074;\ncontinue;\n} else {\nvar id = cljs.core.first(seq__34899__$1);\nknowledge_graph.core.ensure_node(id);\n\n\nvar G__35075 = cljs.core.next(seq__34899__$1);\nvar G__35076 = null;\nvar G__35077 = (0);\nvar G__35078 = (0);\nseq__34899 = G__35075;\nchunk__34900 = G__35076;\ncount__34901 = G__35077;\ni__34902 = G__35078;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\nknowledge_graph.core.add_node_relation = (function knowledge_graph$core$add_node_relation(id,relation){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(knowledge_graph.core.node_store,cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id,new cljs.core.Keyword(null,\"outs\",\"outs\",729500157)], null),cljs.core.conj,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([relation], 0));\n});\nknowledge_graph.core.get_rel_type = (function knowledge_graph$core$get_rel_type(id){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"<-\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.take.cljs$core$IFn$_invoke$arity$2((2),cljs.core.name(id))))){\nreturn new cljs.core.Keyword(null,\"backward\",\"backward\",554036364);\n} else {\nreturn new cljs.core.Keyword(null,\"forward\",\"forward\",-557345303);\n}\n});\nknowledge_graph.core.reverse_relation_type = (function knowledge_graph$core$reverse_relation_type(id){\nvar n = cljs.core.name(id);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"<\",cljs.core.first(n))){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.drop.cljs$core$IFn$_invoke$arity$2((2),n)));\n} else {\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1([\"<-\",n].join(''));\n}\n});\nknowledge_graph.core.rr = knowledge_graph.core.reverse_relation_type;\nknowledge_graph.core.reverse_relation_info = cljs.core.identity;\nknowledge_graph.core.new_relation = (function knowledge_graph$core$new_relation(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___35079 = arguments.length;\nvar i__4790__auto___35080 = (0);\nwhile(true){\nif((i__4790__auto___35080 < len__4789__auto___35079)){\nargs__4795__auto__.push((arguments[i__4790__auto___35080]));\n\nvar G__35081 = (i__4790__auto___35080 + (1));\ni__4790__auto___35080 = G__35081;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((4) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((4)),(0),null)):null);\nreturn knowledge_graph.core.new_relation.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4796__auto__);\n});\n\n(knowledge_graph.core.new_relation.cljs$core$IFn$_invoke$arity$variadic = (function (source,type,target,info,p__34908){\nvar map__34909 = p__34908;\nvar map__34909__$1 = (((((!((map__34909 == null))))?(((((map__34909.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34909.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34909):map__34909);\nvar reverse = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34909__$1,new cljs.core.Keyword(null,\"reverse\",\"reverse\",-888455266));\nif(cljs.core.truth_(reverse)){\nreturn knowledge_graph.core.new_relation(target,knowledge_graph.core.reverse_relation_type(type),source,(knowledge_graph.core.reverse_relation_info.cljs$core$IFn$_invoke$arity$1 ? knowledge_graph.core.reverse_relation_info.cljs$core$IFn$_invoke$arity$1(info) : knowledge_graph.core.reverse_relation_info.call(null,info)));\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"source\",\"source\",-433931539),source,new cljs.core.Keyword(null,\"target\",\"target\",253001721),target,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),type,new cljs.core.Keyword(null,\"info\",\"info\",-317069002),info], null);\n}\n}));\n\n(knowledge_graph.core.new_relation.cljs$lang$maxFixedArity = (4));\n\n/** @this {Function} */\n(knowledge_graph.core.new_relation.cljs$lang$applyTo = (function (seq34903){\nvar G__34904 = cljs.core.first(seq34903);\nvar seq34903__$1 = cljs.core.next(seq34903);\nvar G__34905 = cljs.core.first(seq34903__$1);\nvar seq34903__$2 = cljs.core.next(seq34903__$1);\nvar G__34906 = cljs.core.first(seq34903__$2);\nvar seq34903__$3 = cljs.core.next(seq34903__$2);\nvar G__34907 = cljs.core.first(seq34903__$3);\nvar seq34903__$4 = cljs.core.next(seq34903__$3);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__34904,G__34905,G__34906,G__34907,seq34903__$4);\n}));\n\nknowledge_graph.core.new_relations = (function knowledge_graph$core$new_relations(source,type,target,info){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [knowledge_graph.core.new_relation(source,type,target,info),knowledge_graph.core.new_relation.cljs$core$IFn$_invoke$arity$variadic(source,type,target,info,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"reverse\",\"reverse\",-888455266),true], 0))], null);\n});\nknowledge_graph.core.add_relation = (function knowledge_graph$core$add_relation(var_args){\nvar G__34912 = arguments.length;\nswitch (G__34912) {\ncase 3:\nreturn knowledge_graph.core.add_relation.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn knowledge_graph.core.add_relation.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(knowledge_graph.core.add_relation.cljs$core$IFn$_invoke$arity$3 = (function (source,type,target){\nreturn knowledge_graph.core.add_relation.cljs$core$IFn$_invoke$arity$4(source,type,target,null);\n}));\n\n(knowledge_graph.core.add_relation.cljs$core$IFn$_invoke$arity$4 = (function (source,type,target,info){\nknowledge_graph.core.ensure_nodes(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [source,target], null));\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(type,new cljs.core.Keyword(null,\"special-type\",\"special-type\",1622648935))){\nreturn null;\n} else {\nvar vec__34913 = knowledge_graph.core.new_relations(source,type,target,info);\nvar source_rel = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34913,(0),null);\nvar target_rel = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34913,(1),null);\nknowledge_graph.core.add_node_relation(source,source_rel);\n\nreturn knowledge_graph.core.add_node_relation(target,target_rel);\n\n}\n}));\n\n(knowledge_graph.core.add_relation.cljs$lang$maxFixedArity = 4);\n\nknowledge_graph.core.rel = knowledge_graph.core.add_relation;\nknowledge_graph.core.filter_outputs = (function knowledge_graph$core$filter_outputs(id,f){\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2(f,knowledge_graph.core.get_node_outs(id));\n});\nknowledge_graph.core.get_outs_of_type = (function knowledge_graph$core$get_outs_of_type(id,type){\nreturn knowledge_graph.core.filter_outputs(id,(function (p1__34916_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(type,new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__34916_SHARP_));\n}));\n});\nknowledge_graph.core.has_outs_of_type_QMARK_ = (function knowledge_graph$core$has_outs_of_type_QMARK_(id,type){\nreturn (!(cljs.core.empty_QMARK_(knowledge_graph.core.get_outs_of_type(id,type))));\n});\nknowledge_graph.core.test_path = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"source\",\"source\",-433931539),new cljs.core.Keyword(null,\"dog1\",\"dog1\",-1123781317),new cljs.core.Keyword(null,\"target\",\"target\",253001721),new cljs.core.Keyword(null,\"dog2\",\"dog2\",-363556383),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),null], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"source\",\"source\",-433931539),new cljs.core.Keyword(null,\"dog2\",\"dog2\",-363556383),new cljs.core.Keyword(null,\"target\",\"target\",253001721),new cljs.core.Keyword(null,\"dog3\",\"dog3\",1599445070),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),null], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"source\",\"source\",-433931539),new cljs.core.Keyword(null,\"dog3\",\"dog3\",1599445070),new cljs.core.Keyword(null,\"target\",\"target\",253001721),new cljs.core.Keyword(null,\"dog4\",\"dog4\",-35928155),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),null], null),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"source\",\"source\",-433931539),new cljs.core.Keyword(null,\"dog4\",\"dog4\",-35928155),new cljs.core.Keyword(null,\"target\",\"target\",253001721),new cljs.core.Keyword(null,\"dog5\",\"dog5\",475047359),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),null], null)], null);\nknowledge_graph.core.other = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"source\",\"source\",-433931539),new cljs.core.Keyword(null,\"dog1\",\"dog1\",-1123781317),new cljs.core.Keyword(null,\"target\",\"target\",253001721),new cljs.core.Keyword(null,\"cat\",\"cat\",-1457810207),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),null], null)], null);\nknowledge_graph.core._test = (function knowledge_graph$core$_test(n){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.take.cljs$core$IFn$_invoke$arity$2(n,knowledge_graph.core.test_path));\n});\nknowledge_graph.core.path_to_key = (function knowledge_graph$core$path_to_key(path){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.flatten((function (){var iter__4582__auto__ = (function knowledge_graph$core$path_to_key_$_iter__34917(s__34918){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__34918__$1 = s__34918;\nwhile(true){\nvar temp__5735__auto__ = cljs.core.seq(s__34918__$1);\nif(temp__5735__auto__){\nvar s__34918__$2 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__34918__$2)){\nvar c__4580__auto__ = cljs.core.chunk_first(s__34918__$2);\nvar size__4581__auto__ = cljs.core.count(c__4580__auto__);\nvar b__34920 = cljs.core.chunk_buffer(size__4581__auto__);\nif((function (){var i__34919 = (0);\nwhile(true){\nif((i__34919 < size__4581__auto__)){\nvar map__34921 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4580__auto__,i__34919);\nvar map__34921__$1 = (((((!((map__34921 == null))))?(((((map__34921.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34921.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34921):map__34921);\nvar source = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34921__$1,new cljs.core.Keyword(null,\"source\",\"source\",-433931539));\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34921__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34921__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\ncljs.core.chunk_append(b__34920,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [source,type], null));\n\nvar G__35083 = (i__34919 + (1));\ni__34919 = G__35083;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__34920),knowledge_graph$core$path_to_key_$_iter__34917(cljs.core.chunk_rest(s__34918__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__34920),null);\n}\n} else {\nvar map__34923 = cljs.core.first(s__34918__$2);\nvar map__34923__$1 = (((((!((map__34923 == null))))?(((((map__34923.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34923.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34923):map__34923);\nvar source = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34923__$1,new cljs.core.Keyword(null,\"source\",\"source\",-433931539));\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34923__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34923__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [source,type], null),knowledge_graph$core$path_to_key_$_iter__34917(cljs.core.rest(s__34918__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4582__auto__(path);\n})())),new cljs.core.Keyword(null,\"target\",\"target\",253001721).cljs$core$IFn$_invoke$arity$1(cljs.core.last(path)));\n});\nknowledge_graph.core.searches = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nknowledge_graph.core.clear_searches = (function knowledge_graph$core$clear_searches(){\nreturn cljs.core.reset_BANG_(knowledge_graph.core.searches,cljs.core.PersistentArrayMap.EMPTY);\n});\nknowledge_graph.core.tmp_matches = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentHashSet.EMPTY);\nknowledge_graph.core.clear_matches = (function knowledge_graph$core$clear_matches(){\nreturn cljs.core.reset_BANG_(knowledge_graph.core.tmp_matches,cljs.core.PersistentVector.EMPTY);\n});\nknowledge_graph.core.reset_search = (function knowledge_graph$core$reset_search(){\nknowledge_graph.core.clear_searches();\n\nreturn knowledge_graph.core.clear_matches();\n});\nvar G__34925_35084 = new cljs.core.Keyword(null,\"dog\",\"dog\",-1650861974);\nvar G__34926_35085 = new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949);\nvar G__34927_35086 = new cljs.core.Keyword(null,\"animal\",\"animal\",-1445940363);\n(knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3 ? knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3(G__34925_35084,G__34926_35085,G__34927_35086) : knowledge_graph.core.rel.call(null,G__34925_35084,G__34926_35085,G__34927_35086));\nvar G__34928_35087 = new cljs.core.Keyword(null,\"dog\",\"dog\",-1650861974);\nvar G__34929_35088 = new cljs.core.Keyword(null,\"does-action\",\"does-action\",1439555874);\nvar G__34930_35089 = new cljs.core.Keyword(null,\"bark\",\"bark\",836326002);\n(knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3 ? knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3(G__34928_35087,G__34929_35088,G__34930_35089) : knowledge_graph.core.rel.call(null,G__34928_35087,G__34929_35088,G__34930_35089));\nvar G__34931_35090 = new cljs.core.Keyword(null,\"cat\",\"cat\",-1457810207);\nvar G__34932_35091 = new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949);\nvar G__34933_35092 = new cljs.core.Keyword(null,\"animal\",\"animal\",-1445940363);\n(knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3 ? knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3(G__34931_35090,G__34932_35091,G__34933_35092) : knowledge_graph.core.rel.call(null,G__34931_35090,G__34932_35091,G__34933_35092));\nvar G__34934_35093 = new cljs.core.Keyword(null,\"animal\",\"animal\",-1445940363);\nvar G__34935_35094 = new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949);\nvar G__34936_35095 = new cljs.core.Keyword(null,\"organism\",\"organism\",-896952862);\n(knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3 ? knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3(G__34934_35093,G__34935_35094,G__34936_35095) : knowledge_graph.core.rel.call(null,G__34934_35093,G__34935_35094,G__34936_35095));\nvar G__34937_35096 = new cljs.core.Keyword(null,\"organism\",\"organism\",-896952862);\nvar G__34938_35097 = new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949);\nvar G__34939_35098 = new cljs.core.Keyword(null,\"living-thing\",\"living-thing\",1647478162);\n(knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3 ? knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3(G__34937_35096,G__34938_35097,G__34939_35098) : knowledge_graph.core.rel.call(null,G__34937_35096,G__34938_35097,G__34939_35098));\nvar G__34940_35099 = new cljs.core.Keyword(null,\"living-thing\",\"living-thing\",1647478162);\nvar G__34941_35100 = new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949);\nvar G__34942_35101 = new cljs.core.Keyword(null,\"thing\",\"thing\",270525715);\n(knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3 ? knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3(G__34940_35099,G__34941_35100,G__34942_35101) : knowledge_graph.core.rel.call(null,G__34940_35099,G__34941_35100,G__34942_35101));\nvar G__34943_35102 = new cljs.core.Keyword(null,\"dog\",\"dog\",-1650861974);\nvar G__34944_35103 = new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949);\nvar G__34945_35104 = new cljs.core.Keyword(null,\"mammal\",\"mammal\",1946020268);\n(knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3 ? knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3(G__34943_35102,G__34944_35103,G__34945_35104) : knowledge_graph.core.rel.call(null,G__34943_35102,G__34944_35103,G__34945_35104));\nvar G__34946_35105 = new cljs.core.Keyword(null,\"mammal\",\"mammal\",1946020268);\nvar G__34947_35106 = new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949);\nvar G__34948_35107 = new cljs.core.Keyword(null,\"organism\",\"organism\",-896952862);\n(knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3 ? knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3(G__34946_35105,G__34947_35106,G__34948_35107) : knowledge_graph.core.rel.call(null,G__34946_35105,G__34947_35106,G__34948_35107));\nvar G__34949_35108 = new cljs.core.Keyword(null,\"dog\",\"dog\",-1650861974);\nvar G__34950_35109 = new cljs.core.Keyword(null,\"<-kind-of\",\"<-kind-of\",-978056794);\nvar G__34951_35110 = new cljs.core.Keyword(null,\"poodle\",\"poodle\",658386219);\n(knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3 ? knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3(G__34949_35108,G__34950_35109,G__34951_35110) : knowledge_graph.core.rel.call(null,G__34949_35108,G__34950_35109,G__34951_35110));\nknowledge_graph.core.KIND_OF = (function knowledge_graph$core$KIND_OF(path){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949),null], null), null),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"type\",\"type\",1174270348),path)));\n});\nknowledge_graph.core._register_search = (function knowledge_graph$core$_register_search(path){\nvar path_key = knowledge_graph.core.path_to_key(path);\nknowledge_graph.core.log.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([path_key], 0));\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(knowledge_graph.core.searches,cljs.core.assoc_in,path_key,cljs.core.PersistentArrayMap.EMPTY);\n});\nknowledge_graph.core._report_match = (function knowledge_graph$core$_report_match(p__34952){\nvar map__34953 = p__34952;\nvar map__34953__$1 = (((((!((map__34953 == null))))?(((((map__34953.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34953.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34953):map__34953);\nvar node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34953__$1,new cljs.core.Keyword(null,\"node\",\"node\",581201198));\nvar path = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34953__$1,new cljs.core.Keyword(null,\"path\",\"path\",-188191168));\nvar path_key = knowledge_graph.core.path_to_key(path);\nknowledge_graph.core.log.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"FOUND_MATCH::\",path_key], 0));\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(knowledge_graph.core.tmp_matches,cljs.core.conj,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node,path], null));\n});\nknowledge_graph.core._should_stop_QMARK_ = (function knowledge_graph$core$_should_stop_QMARK_(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___35111 = arguments.length;\nvar i__4790__auto___35112 = (0);\nwhile(true){\nif((i__4790__auto___35112 < len__4789__auto___35111)){\nargs__4795__auto__.push((arguments[i__4790__auto___35112]));\n\nvar G__35113 = (i__4790__auto___35112 + (1));\ni__4790__auto___35112 = G__35113;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((2) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((2)),(0),null)):null);\nreturn knowledge_graph.core._should_stop_QMARK_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4796__auto__);\n});\n\n(knowledge_graph.core._should_stop_QMARK_.cljs$core$IFn$_invoke$arity$variadic = (function (node,path,p__34958){\nvar map__34959 = p__34958;\nvar map__34959__$1 = (((((!((map__34959 == null))))?(((((map__34959.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34959.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34959):map__34959);\nvar match_result = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34959__$1,new cljs.core.Keyword(null,\"match-result\",\"match-result\",-1198577436));\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((10),cljs.core.count(path));\n}));\n\n(knowledge_graph.core._should_stop_QMARK_.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(knowledge_graph.core._should_stop_QMARK_.cljs$lang$applyTo = (function (seq34955){\nvar G__34956 = cljs.core.first(seq34955);\nvar seq34955__$1 = cljs.core.next(seq34955);\nvar G__34957 = cljs.core.first(seq34955__$1);\nvar seq34955__$2 = cljs.core.next(seq34955__$1);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__34956,G__34957,seq34955__$2);\n}));\n\nknowledge_graph.core.length_stopper = (function knowledge_graph$core$length_stopper(num){\nreturn (function() { \nvar G__35114__delegate = function (node,path,p__34961){\nvar map__34962 = p__34961;\nvar map__34962__$1 = (((((!((map__34962 == null))))?(((((map__34962.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34962.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34962):map__34962);\nvar match_result = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34962__$1,new cljs.core.Keyword(null,\"match-result\",\"match-result\",-1198577436));\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(num,cljs.core.count(path));\n};\nvar G__35114 = function (node,path,var_args){\nvar p__34961 = null;\nif (arguments.length > 2) {\nvar G__35115__i = 0, G__35115__a = new Array(arguments.length -  2);\nwhile (G__35115__i < G__35115__a.length) {G__35115__a[G__35115__i] = arguments[G__35115__i + 2]; ++G__35115__i;}\n  p__34961 = new cljs.core.IndexedSeq(G__35115__a,0,null);\n} \nreturn G__35114__delegate.call(this,node,path,p__34961);};\nG__35114.cljs$lang$maxFixedArity = 2;\nG__35114.cljs$lang$applyTo = (function (arglist__35116){\nvar node = cljs.core.first(arglist__35116);\narglist__35116 = cljs.core.next(arglist__35116);\nvar path = cljs.core.first(arglist__35116);\nvar p__34961 = cljs.core.rest(arglist__35116);\nreturn G__35114__delegate(node,path,p__34961);\n});\nG__35114.cljs$core$IFn$_invoke$arity$variadic = G__35114__delegate;\nreturn G__35114;\n})()\n;\n});\nknowledge_graph.core._match_QMARK_ = (function knowledge_graph$core$_match_QMARK_(node,path){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((4),cljs.core.count(path));\n});\nknowledge_graph.core._get_next_nodes = (function knowledge_graph$core$_get_next_nodes(node,path){\nreturn knowledge_graph.core.get_outs_of_type(node,new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949));\n});\nknowledge_graph.core._terminate_search = (function knowledge_graph$core$_terminate_search(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___35117 = arguments.length;\nvar i__4790__auto___35118 = (0);\nwhile(true){\nif((i__4790__auto___35118 < len__4789__auto___35117)){\nargs__4795__auto__.push((arguments[i__4790__auto___35118]));\n\nvar G__35119 = (i__4790__auto___35118 + (1));\ni__4790__auto___35118 = G__35119;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((2) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((2)),(0),null)):null);\nreturn knowledge_graph.core._terminate_search.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4796__auto__);\n});\n\n(knowledge_graph.core._terminate_search.cljs$core$IFn$_invoke$arity$variadic = (function (node,path,p__34967){\nvar map__34968 = p__34967;\nvar map__34968__$1 = (((((!((map__34968 == null))))?(((((map__34968.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34968.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34968):map__34968);\nvar match_result = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34968__$1,new cljs.core.Keyword(null,\"match-result\",\"match-result\",-1198577436));\nvar reason = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34968__$1,new cljs.core.Keyword(null,\"reason\",\"reason\",-2070751759));\nvar path_key = knowledge_graph.core.path_to_key(path);\nknowledge_graph.core.log.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"TERMINATING::\",path_key,\"::\",reason], 0));\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(knowledge_graph.core.searches,cljs.core.assoc_in,path_key,reason);\n}));\n\n(knowledge_graph.core._terminate_search.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(knowledge_graph.core._terminate_search.cljs$lang$applyTo = (function (seq34964){\nvar G__34965 = cljs.core.first(seq34964);\nvar seq34964__$1 = cljs.core.next(seq34964);\nvar G__34966 = cljs.core.first(seq34964__$1);\nvar seq34964__$2 = cljs.core.next(seq34964__$1);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__34965,G__34966,seq34964__$2);\n}));\n\nknowledge_graph.core.node_jump = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nknowledge_graph.core.schedule_node_jump = (function knowledge_graph$core$schedule_node_jump(p__34970){\nvar map__34971 = p__34970;\nvar map__34971__$1 = (((((!((map__34971 == null))))?(((((map__34971.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34971.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34971):map__34971);\nvar args = map__34971__$1;\nvar node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34971__$1,new cljs.core.Keyword(null,\"node\",\"node\",581201198));\nvar path = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34971__$1,new cljs.core.Keyword(null,\"path\",\"path\",-188191168));\nvar out = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34971__$1,new cljs.core.Keyword(null,\"out\",\"out\",-910545517));\nvar match_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34971__$1,new cljs.core.Keyword(null,\"match?\",\"match?\",-1487756738));\nvar should_stop_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34971__$1,new cljs.core.Keyword(null,\"should-stop?\",\"should-stop?\",-364070982));\nvar get_next_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34971__$1,new cljs.core.Keyword(null,\"get-next-nodes\",\"get-next-nodes\",-67388334));\nvar report_match = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34971__$1,new cljs.core.Keyword(null,\"report-match\",\"report-match\",1812059082));\nvar terminate_search = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34971__$1,new cljs.core.Keyword(null,\"terminate-search\",\"terminate-search\",555123470));\nvar new_path = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(path,out);\nvar next_node = new cljs.core.Keyword(null,\"target\",\"target\",253001721).cljs$core$IFn$_invoke$arity$1(out);\nvar G__34974 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([args,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"path\",\"path\",-188191168),new_path,new cljs.core.Keyword(null,\"node\",\"node\",581201198),next_node], null)], 0));\nvar fexpr__34973 = cljs.core.deref(knowledge_graph.core.node_jump);\nreturn (fexpr__34973.cljs$core$IFn$_invoke$arity$1 ? fexpr__34973.cljs$core$IFn$_invoke$arity$1(G__34974) : fexpr__34973.call(null,G__34974));\n});\nknowledge_graph.core.schedule_node_jumps = (function knowledge_graph$core$schedule_node_jumps(p__34975){\nvar map__34976 = p__34975;\nvar map__34976__$1 = (((((!((map__34976 == null))))?(((((map__34976.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34976.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34976):map__34976);\nvar args = map__34976__$1;\nvar node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34976__$1,new cljs.core.Keyword(null,\"node\",\"node\",581201198));\nvar path = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34976__$1,new cljs.core.Keyword(null,\"path\",\"path\",-188191168));\nvar outs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34976__$1,new cljs.core.Keyword(null,\"outs\",\"outs\",729500157));\nvar match_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34976__$1,new cljs.core.Keyword(null,\"match?\",\"match?\",-1487756738));\nvar should_stop_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34976__$1,new cljs.core.Keyword(null,\"should-stop?\",\"should-stop?\",-364070982));\nvar get_next_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34976__$1,new cljs.core.Keyword(null,\"get-next-nodes\",\"get-next-nodes\",-67388334));\nvar report_match = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34976__$1,new cljs.core.Keyword(null,\"report-match\",\"report-match\",1812059082));\nvar terminate_search = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34976__$1,new cljs.core.Keyword(null,\"terminate-search\",\"terminate-search\",555123470));\nvar seq__34978 = cljs.core.seq(outs);\nvar chunk__34979 = null;\nvar count__34980 = (0);\nvar i__34981 = (0);\nwhile(true){\nif((i__34981 < count__34980)){\nvar out = chunk__34979.cljs$core$IIndexed$_nth$arity$2(null,i__34981);\nknowledge_graph.core.schedule_node_jump(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([args,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"out\",\"out\",-910545517),out], null)], 0)));\n\n\nvar G__35120 = seq__34978;\nvar G__35121 = chunk__34979;\nvar G__35122 = count__34980;\nvar G__35123 = (i__34981 + (1));\nseq__34978 = G__35120;\nchunk__34979 = G__35121;\ncount__34980 = G__35122;\ni__34981 = G__35123;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__34978);\nif(temp__5735__auto__){\nvar seq__34978__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__34978__$1)){\nvar c__4609__auto__ = cljs.core.chunk_first(seq__34978__$1);\nvar G__35124 = cljs.core.chunk_rest(seq__34978__$1);\nvar G__35125 = c__4609__auto__;\nvar G__35126 = cljs.core.count(c__4609__auto__);\nvar G__35127 = (0);\nseq__34978 = G__35124;\nchunk__34979 = G__35125;\ncount__34980 = G__35126;\ni__34981 = G__35127;\ncontinue;\n} else {\nvar out = cljs.core.first(seq__34978__$1);\nknowledge_graph.core.schedule_node_jump(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([args,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"out\",\"out\",-910545517),out], null)], 0)));\n\n\nvar G__35128 = cljs.core.next(seq__34978__$1);\nvar G__35129 = null;\nvar G__35130 = (0);\nvar G__35131 = (0);\nseq__34978 = G__35128;\nchunk__34979 = G__35129;\ncount__34980 = G__35130;\ni__34981 = G__35131;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\nknowledge_graph.core.process_node = (function knowledge_graph$core$process_node(p__34982){\nvar map__34983 = p__34982;\nvar map__34983__$1 = (((((!((map__34983 == null))))?(((((map__34983.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__34983.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__34983):map__34983);\nvar args = map__34983__$1;\nvar node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34983__$1,new cljs.core.Keyword(null,\"node\",\"node\",581201198));\nvar path = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34983__$1,new cljs.core.Keyword(null,\"path\",\"path\",-188191168));\nvar match_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34983__$1,new cljs.core.Keyword(null,\"match?\",\"match?\",-1487756738));\nvar should_stop_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34983__$1,new cljs.core.Keyword(null,\"should-stop?\",\"should-stop?\",-364070982));\nvar get_next_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34983__$1,new cljs.core.Keyword(null,\"get-next-nodes\",\"get-next-nodes\",-67388334));\nvar report_match = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34983__$1,new cljs.core.Keyword(null,\"report-match\",\"report-match\",1812059082));\nvar terminate_search = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34983__$1,new cljs.core.Keyword(null,\"terminate-search\",\"terminate-search\",555123470));\nvar register_search = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34983__$1,new cljs.core.Keyword(null,\"register-search\",\"register-search\",-1475461141));\n(register_search.cljs$core$IFn$_invoke$arity$1 ? register_search.cljs$core$IFn$_invoke$arity$1(path) : register_search.call(null,path));\n\nvar result = (match_QMARK_.cljs$core$IFn$_invoke$arity$2 ? match_QMARK_.cljs$core$IFn$_invoke$arity$2(node,path) : match_QMARK_.call(null,node,path));\nif(cljs.core.truth_(result)){\nvar G__34985_35132 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),node,new cljs.core.Keyword(null,\"path\",\"path\",-188191168),path], null);\n(report_match.cljs$core$IFn$_invoke$arity$1 ? report_match.cljs$core$IFn$_invoke$arity$1(G__34985_35132) : report_match.call(null,G__34985_35132));\n} else {\n}\n\nif(cljs.core.not((function (){var G__34986 = node;\nvar G__34987 = path;\nvar G__34988 = new cljs.core.Keyword(null,\"match-result\",\"match-result\",-1198577436);\nvar G__34989 = result;\nreturn (should_stop_QMARK_.cljs$core$IFn$_invoke$arity$4 ? should_stop_QMARK_.cljs$core$IFn$_invoke$arity$4(G__34986,G__34987,G__34988,G__34989) : should_stop_QMARK_.call(null,G__34986,G__34987,G__34988,G__34989));\n})())){\nvar outs = (get_next_nodes.cljs$core$IFn$_invoke$arity$2 ? get_next_nodes.cljs$core$IFn$_invoke$arity$2(node,path) : get_next_nodes.call(null,node,path));\nif(cljs.core.truth_(cljs.core.not_empty(outs))){\nreturn knowledge_graph.core.schedule_node_jumps(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([args,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"outs\",\"outs\",729500157),outs], null)], 0)));\n} else {\nvar G__34990 = node;\nvar G__34991 = path;\nvar G__34992 = new cljs.core.Keyword(null,\"match-result\",\"match-result\",-1198577436);\nvar G__34993 = result;\nvar G__34994 = new cljs.core.Keyword(null,\"reason\",\"reason\",-2070751759);\nvar G__34995 = \"NO_OUTS\";\nreturn (terminate_search.cljs$core$IFn$_invoke$arity$6 ? terminate_search.cljs$core$IFn$_invoke$arity$6(G__34990,G__34991,G__34992,G__34993,G__34994,G__34995) : terminate_search.call(null,G__34990,G__34991,G__34992,G__34993,G__34994,G__34995));\n}\n} else {\nvar G__34996 = node;\nvar G__34997 = path;\nvar G__34998 = new cljs.core.Keyword(null,\"match-result\",\"match-result\",-1198577436);\nvar G__34999 = result;\nvar G__35000 = new cljs.core.Keyword(null,\"reason\",\"reason\",-2070751759);\nvar G__35001 = \"T_SIG\";\nreturn (terminate_search.cljs$core$IFn$_invoke$arity$6 ? terminate_search.cljs$core$IFn$_invoke$arity$6(G__34996,G__34997,G__34998,G__34999,G__35000,G__35001) : terminate_search.call(null,G__34996,G__34997,G__34998,G__34999,G__35000,G__35001));\n}\n});\ncljs.core.reset_BANG_(knowledge_graph.core.node_jump,knowledge_graph.core.process_node);\nknowledge_graph.core.test_search = (function knowledge_graph$core$test_search(){\nreturn knowledge_graph.core.process_node(new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),new cljs.core.Keyword(null,\"poodle\",\"poodle\",658386219),new cljs.core.Keyword(null,\"path\",\"path\",-188191168),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"match?\",\"match?\",-1487756738),knowledge_graph.core._match_QMARK_,new cljs.core.Keyword(null,\"should-stop?\",\"should-stop?\",-364070982),knowledge_graph.core.length_stopper((10)),new cljs.core.Keyword(null,\"get-next-nodes\",\"get-next-nodes\",-67388334),knowledge_graph.core._get_next_nodes,new cljs.core.Keyword(null,\"report-match\",\"report-match\",1812059082),knowledge_graph.core._report_match,new cljs.core.Keyword(null,\"terminate-search\",\"terminate-search\",555123470),knowledge_graph.core._terminate_search,new cljs.core.Keyword(null,\"register-search\",\"register-search\",-1475461141),knowledge_graph.core._register_search], null));\n});\nknowledge_graph.core.kind_of_search = (function knowledge_graph$core$kind_of_search(a,b){\nknowledge_graph.core.reset_search();\n\nknowledge_graph.core.process_node(new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),a,new cljs.core.Keyword(null,\"path\",\"path\",-188191168),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"match?\",\"match?\",-1487756738),(function (node,path){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(b,new cljs.core.Keyword(null,\"target\",\"target\",253001721).cljs$core$IFn$_invoke$arity$1(cljs.core.last(path)));\n}),new cljs.core.Keyword(null,\"should-stop?\",\"should-stop?\",-364070982),knowledge_graph.core.length_stopper((10)),new cljs.core.Keyword(null,\"get-next-nodes\",\"get-next-nodes\",-67388334),(function (node,path){\nreturn knowledge_graph.core.get_outs_of_type(node,new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949));\n}),new cljs.core.Keyword(null,\"report-match\",\"report-match\",1812059082),knowledge_graph.core._report_match,new cljs.core.Keyword(null,\"terminate-search\",\"terminate-search\",555123470),knowledge_graph.core._terminate_search,new cljs.core.Keyword(null,\"register-search\",\"register-search\",-1475461141),knowledge_graph.core._register_search], null));\n\nif(cljs.core.truth_(cljs.core.not_empty(cljs.core.deref(knowledge_graph.core.tmp_matches)))){\nreturn true;\n} else {\nreturn false;\n}\n});\nknowledge_graph.core.attribute_search = (function knowledge_graph$core$attribute_search(a,b){\nknowledge_graph.core.reset_search();\n\nknowledge_graph.core.process_node(new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),a,new cljs.core.Keyword(null,\"path\",\"path\",-188191168),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"match?\",\"match?\",-1487756738),(function (node,path){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(b,new cljs.core.Keyword(null,\"target\",\"target\",253001721).cljs$core$IFn$_invoke$arity$1(cljs.core.last(path)));\n}),new cljs.core.Keyword(null,\"should-stop?\",\"should-stop?\",-364070982),knowledge_graph.core.length_stopper((10)),new cljs.core.Keyword(null,\"get-next-nodes\",\"get-next-nodes\",-67388334),(function (node,path){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(knowledge_graph.core.get_outs_of_type(node,new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949)),knowledge_graph.core.get_outs_of_type(node,new cljs.core.Keyword(null,\"is\",\"is\",369128998)));\n}),new cljs.core.Keyword(null,\"report-match\",\"report-match\",1812059082),knowledge_graph.core._report_match,new cljs.core.Keyword(null,\"terminate-search\",\"terminate-search\",555123470),knowledge_graph.core._terminate_search,new cljs.core.Keyword(null,\"register-search\",\"register-search\",-1475461141),knowledge_graph.core._register_search], null));\n\nif(cljs.core.truth_(cljs.core.not_empty(cljs.core.deref(knowledge_graph.core.tmp_matches)))){\nreturn true;\n} else {\nreturn false;\n}\n});\nknowledge_graph.core.clean = (function knowledge_graph$core$clean(x){\nreturn cljs.core.name(x);\n});\nknowledge_graph.core.describe_rel = (function knowledge_graph$core$describe_rel(p__35002){\nvar map__35003 = p__35002;\nvar map__35003__$1 = (((((!((map__35003 == null))))?(((((map__35003.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__35003.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__35003):map__35003);\nvar source = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__35003__$1,new cljs.core.Keyword(null,\"source\",\"source\",-433931539));\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__35003__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__35003__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar info = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__35003__$1,new cljs.core.Keyword(null,\"info\",\"info\",-317069002));\nvar vec__35005 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(knowledge_graph.core.clean,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [source,target], null));\nvar _source = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35005,(0),null);\nvar _target = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35005,(1),null);\nvar G__35008 = type;\nvar G__35008__$1 = (((G__35008 instanceof cljs.core.Keyword))?G__35008.fqn:null);\nswitch (G__35008__$1) {\ncase \"kind-of\":\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(_source),\" is a kind of \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(_target)].join('');\n\nbreak;\ncase \"<-kind-of\":\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(_source),\" includes the subtype of \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(_target)].join('');\n\nbreak;\ncase \"is\":\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(_source),\" is \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(_target)].join('');\n\nbreak;\ncase \"does-action\":\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(_source),\" does the action \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(_target)].join('');\n\nbreak;\ndefault:\nreturn null;\n\n}\n});\nknowledge_graph.core.describe_node = (function knowledge_graph$core$describe_node(k){\nvar temp__5733__auto__ = (function (){var G__35009 = cljs.core.deref(knowledge_graph.core.node_store);\nreturn (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__35009) : k.call(null,G__35009));\n})();\nif(cljs.core.truth_(temp__5733__auto__)){\nvar node = temp__5733__auto__;\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\". \",cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,(function (){var iter__4582__auto__ = (function knowledge_graph$core$describe_node_$_iter__35010(s__35011){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__35011__$1 = s__35011;\nwhile(true){\nvar temp__5735__auto__ = cljs.core.seq(s__35011__$1);\nif(temp__5735__auto__){\nvar s__35011__$2 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__35011__$2)){\nvar c__4580__auto__ = cljs.core.chunk_first(s__35011__$2);\nvar size__4581__auto__ = cljs.core.count(c__4580__auto__);\nvar b__35013 = cljs.core.chunk_buffer(size__4581__auto__);\nif((function (){var i__35012 = (0);\nwhile(true){\nif((i__35012 < size__4581__auto__)){\nvar rel = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4580__auto__,i__35012);\ncljs.core.chunk_append(b__35013,knowledge_graph.core.describe_rel(rel));\n\nvar G__35134 = (i__35012 + (1));\ni__35012 = G__35134;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__35013),knowledge_graph$core$describe_node_$_iter__35010(cljs.core.chunk_rest(s__35011__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__35013),null);\n}\n} else {\nvar rel = cljs.core.first(s__35011__$2);\nreturn cljs.core.cons(knowledge_graph.core.describe_rel(rel),knowledge_graph$core$describe_node_$_iter__35010(cljs.core.rest(s__35011__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4582__auto__(new cljs.core.Keyword(null,\"outs\",\"outs\",729500157).cljs$core$IFn$_invoke$arity$1(node));\n})()));\n} else {\nreturn [\"Sorry I dont know about \",cljs.core.name(k)].join('');\n}\n});\nknowledge_graph.core.to_node_name = (function knowledge_graph$core$to_node_name(x){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"-\",clojure.string.split.cljs$core$IFn$_invoke$arity$2(x,\" \")));\n});\nknowledge_graph.core.speak = knowledge_graph.core.log;\nknowledge_graph.core.match_lib = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [/([^ ]*) is a kind of (.*)/,/a (.*) is a kind of (.*)/,/a (.*) is a (.*)/], null),(function (p__35014){\nvar vec__35015 = p__35014;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35015,(0),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35015,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35015,(2),null);\nvar G__35018_35135 = knowledge_graph.core.to_node_name(a);\nvar G__35019_35136 = new cljs.core.Keyword(null,\"kind-of\",\"kind-of\",-1666501949);\nvar G__35020_35137 = knowledge_graph.core.to_node_name(b);\n(knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3 ? knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3(G__35018_35135,G__35019_35136,G__35020_35137) : knowledge_graph.core.rel.call(null,G__35018_35135,G__35019_35136,G__35020_35137));\n\nreturn (knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1 ? knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1(\"OK\") : knowledge_graph.core.speak.call(null,\"OK\"));\n})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/([^ ]*) is (.*)/,/a (.*) is (.*)/], null),(function (p__35021){\nvar vec__35022 = p__35021;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35022,(0),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35022,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35022,(2),null);\nvar G__35025_35138 = knowledge_graph.core.to_node_name(a);\nvar G__35026_35139 = new cljs.core.Keyword(null,\"is\",\"is\",369128998);\nvar G__35027_35140 = knowledge_graph.core.to_node_name(b);\n(knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3 ? knowledge_graph.core.rel.cljs$core$IFn$_invoke$arity$3(G__35025_35138,G__35026_35139,G__35027_35140) : knowledge_graph.core.rel.call(null,G__35025_35138,G__35026_35139,G__35027_35140));\n\nreturn (knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1 ? knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1(\"OK\") : knowledge_graph.core.speak.call(null,\"OK\"));\n})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/tell me about (.*)/,(function (p__35028){\nvar vec__35029 = p__35028;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35029,(0),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35029,(1),null);\nvar G__35032 = knowledge_graph.core.describe_node(knowledge_graph.core.to_node_name(x));\nreturn (knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1 ? knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1(G__35032) : knowledge_graph.core.speak.call(null,G__35032));\n})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/is a (.*) a kind of (.*)/,(function (p__35033){\nvar vec__35034 = p__35033;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35034,(0),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35034,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35034,(2),null);\nif(knowledge_graph.core.kind_of_search(knowledge_graph.core.to_node_name(a),knowledge_graph.core.to_node_name(b))){\nreturn (knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1 ? knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1(\"YES\") : knowledge_graph.core.speak.call(null,\"YES\"));\n} else {\nreturn (knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1 ? knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1(\"NO\") : knowledge_graph.core.speak.call(null,\"NO\"));\n}\n})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [/does (.*) have the attribute (.*)/,/does (.*) have the characteristic (.*)/,/is a (.*) (.*)/,/is (.*) (.*)/], null),(function (p__35037){\nvar vec__35038 = p__35037;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35038,(0),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35038,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35038,(2),null);\nif(knowledge_graph.core.attribute_search(knowledge_graph.core.to_node_name(a),knowledge_graph.core.to_node_name(b))){\nreturn (knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1 ? knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1(\"YES\") : knowledge_graph.core.speak.call(null,\"YES\"));\n} else {\nreturn (knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1 ? knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1(\"NO\") : knowledge_graph.core.speak.call(null,\"NO\"));\n}\n})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/(why)/,(function (_){\nvar match_info = cljs.core.second(cljs.core.first(cljs.core.deref(knowledge_graph.core.tmp_matches)));\nvar G__35041 = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" and \",cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,(function (){var iter__4582__auto__ = (function knowledge_graph$core$iter__35042(s__35043){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__35043__$1 = s__35043;\nwhile(true){\nvar temp__5735__auto__ = cljs.core.seq(s__35043__$1);\nif(temp__5735__auto__){\nvar s__35043__$2 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__35043__$2)){\nvar c__4580__auto__ = cljs.core.chunk_first(s__35043__$2);\nvar size__4581__auto__ = cljs.core.count(c__4580__auto__);\nvar b__35045 = cljs.core.chunk_buffer(size__4581__auto__);\nif((function (){var i__35044 = (0);\nwhile(true){\nif((i__35044 < size__4581__auto__)){\nvar rel = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4580__auto__,i__35044);\ncljs.core.chunk_append(b__35045,knowledge_graph.core.describe_rel(rel));\n\nvar G__35141 = (i__35044 + (1));\ni__35044 = G__35141;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__35045),knowledge_graph$core$iter__35042(cljs.core.chunk_rest(s__35043__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__35045),null);\n}\n} else {\nvar rel = cljs.core.first(s__35043__$2);\nreturn cljs.core.cons(knowledge_graph.core.describe_rel(rel),knowledge_graph$core$iter__35042(cljs.core.rest(s__35043__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4582__auto__(match_info);\n})()));\nreturn (knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1 ? knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1(G__35041) : knowledge_graph.core.speak.call(null,G__35041));\n})], null)], null);\nknowledge_graph.core.get_re_result = (function knowledge_graph$core$get_re_result(re,text){\nif(cljs.core.vector_QMARK_(re)){\nvar current = cljs.core.first(re);\nvar remaining = cljs.core.rest(re);\nwhile(true){\nif(cljs.core.truth_(current)){\nvar temp__5733__auto__ = cljs.core.re_matches(current,text);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar result = temp__5733__auto__;\nknowledge_graph.core.log.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"for RE: \",current,\" | got result | :: \",result], 0));\n\nreturn result;\n} else {\nvar G__35142 = cljs.core.first(remaining);\nvar G__35143 = cljs.core.rest(remaining);\ncurrent = G__35142;\nremaining = G__35143;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n} else {\nreturn cljs.core.re_matches(re,text);\n}\n});\nknowledge_graph.core.run_match = (function knowledge_graph$core$run_match(text){\nvar G__35049 = cljs.core.first(knowledge_graph.core.match_lib);\nvar vec__35050 = G__35049;\nvar re = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35050,(0),null);\nvar fx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35050,(1),null);\nvar remaining = cljs.core.rest(knowledge_graph.core.match_lib);\nvar G__35049__$1 = G__35049;\nvar remaining__$1 = remaining;\nwhile(true){\nvar vec__35056 = G__35049__$1;\nvar re__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35056,(0),null);\nvar fx__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35056,(1),null);\nvar remaining__$2 = remaining__$1;\nif(cljs.core.truth_(re__$1)){\nvar temp__5733__auto__ = knowledge_graph.core.get_re_result(re__$1,text);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar result = temp__5733__auto__;\nknowledge_graph.core.log.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"found match\"], 0));\n\nknowledge_graph.core.log.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([result], 0));\n\nreturn (fx__$1.cljs$core$IFn$_invoke$arity$1 ? fx__$1.cljs$core$IFn$_invoke$arity$1(result) : fx__$1.call(null,result));\n} else {\nvar G__35144 = cljs.core.first(remaining__$2);\nvar G__35145 = cljs.core.rest(remaining__$2);\nG__35049__$1 = G__35144;\nremaining__$1 = G__35145;\ncontinue;\n}\n} else {\nreturn (knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1 ? knowledge_graph.core.speak.cljs$core$IFn$_invoke$arity$1(\"Sorry I did not understand\") : knowledge_graph.core.speak.call(null,\"Sorry I did not understand\"));\n}\nbreak;\n}\n});\nknowledge_graph.core.process_input = (function knowledge_graph$core$process_input(text){\nreturn knowledge_graph.core.run_match(text);\n});\nknowledge_graph.core.js = (function knowledge_graph$core$js(x){\nreturn cljs.core.clj__GT_js(x);\n});\nknowledge_graph.core.fibb = (function knowledge_graph$core$fibb(n){\nvar G__35059 = n;\nswitch (G__35059) {\ncase (1):\nreturn (1);\n\nbreak;\ncase (2):\nreturn (1);\n\nbreak;\ndefault:\nreturn ((function (){var G__35060 = (n - (1));\nreturn (knowledge_graph.core.fibb.cljs$core$IFn$_invoke$arity$1 ? knowledge_graph.core.fibb.cljs$core$IFn$_invoke$arity$1(G__35060) : knowledge_graph.core.fibb.call(null,G__35060));\n})() + (function (){var G__35061 = (n - (2));\nreturn (knowledge_graph.core.fibb.cljs$core$IFn$_invoke$arity$1 ? knowledge_graph.core.fibb.cljs$core$IFn$_invoke$arity$1(G__35061) : knowledge_graph.core.fibb.call(null,G__35061));\n})());\n\n}\n});\nknowledge_graph.core.fibba = (function knowledge_graph$core$fibba(n){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(knowledge_graph.core.fibb,cljs.core.range.cljs$core$IFn$_invoke$arity$2((1),(n + (1))));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","knowledge_graph/core.cljs","~:line",6,"~:column",5,"~:end-line",6,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros","~$go-loop","^@"],"~:excludes",["~#set",[]],"~:name","~$knowledge-graph.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^J","~$string","^J","~$clojure.set","^L","~$set","^L","~$cljs.core.async","^N","~$cljs.core","^O","~$goog","^P"],"~:seen",["^C",["~:require","~:require-macros"]],"~:uses",["^ ","~$put!","^N","~$chan","^N","~$<!","^N","~$>!","^N","~$timeout","^N","~$close!","^N"],"^S",["^ ","^@","^@","^O","^O","^N","^N"],"~:form",["~#list",["~$ns","^E",["^10",["^S",["^@","~:refer",["^?","^A"]]]],["^10",["^R",["^J","~:as","^K"],["^L","^13","^M"],["^N","^12",["^U","^V","^W","^X","^Y","^Z"]]]]]],"~:flags",["^ ","^S",["^C",[]],"^R",["^C",[]]],"~:js-deps",["^ "],"~:deps",["^P","^O","^J","^L","^N"]],"^G","^E","~:resource-id",["~:shadow.build.classpath/resource","knowledge_graph/core.cljs"],"~:compiled-at",1582107336227,"~:resource-name","knowledge_graph/core.cljs","~:warnings",[],"~:source",";;Wed Apr 26 22:07:23 PDT 2017\n;;@copyright Sattvic-Alma Technologies\n;;@author Oluwaseun Aluko\n\n;;COPIED TO VCS ON | Tue Feb 18 09:56:44 PST 2020\n(ns knowledge-graph.core \n  (:require-macros [cljs.core.async.macros :refer [go go-loop]])\n  (:require [clojure.string :as string]\n            [clojure.set    :as set]\n            [cljs.core.async :refer [put! chan <! >! timeout close!]]))\n\n\n\n(def m-log (fn [& args] \n             (let [msg (apply str (concat [\"[kg]:: \" ] args))]\n               (js/console.log msg))))\n\n\n(def verbose true)\n;;happy coding ~>\n(defn log [& stuff]\n  (if verbose \n    (apply m-log stuff)\n    nil))\n\n(def node-store (atom {}))\n\n(defn get-node [id]\n  (id @node-store))\n\n(defn get-node-outs [id]\n  (:outs (get-node id)))\n\n(defn new-node []\n  {:outs #{} }) \n\n(defn add-node [id]\n  (let [node (new-node)]\n    (swap! node-store assoc id node)))\n\n\n\n(defn node-exists? [id]\n  (if (get-node id)\n    true\n    false))\n\n(defn ensure-node [id]\n  (when (not (node-exists? id))\n    (add-node id))) \n\n(defn ensure-nodes [ids]\n  (doseq [id ids]\n    (ensure-node id)))\n\n(defn add-node-relation [id relation]\n  (swap! node-store update-in [id :outs] conj relation))\n\n(defn get-rel-type [id]\n  (if (= \"<-\" (clojure.string/join (take 2 (name id)))) \n    :backward\n    :forward ))\n\n(defn reverse-relation-type [id]\n  (let [n (name id)]\n    (if (= \\< (first n))\n      (keyword (clojure.string/join (drop 2 n)))\n      (keyword (str \"<-\" n)))))\n\n(def rr reverse-relation-type)\n\n(def reverse-relation-info identity)\n\n(defn new-relation [source type target info & {:keys [reverse]}]\n  (if reverse \n    (new-relation target (reverse-relation-type type) source (reverse-relation-info info)) \n    {:source source \n     :target target\n     :type   type\n     :info   info }))\n\n(defn new-relations [source type target info]\n  [(new-relation source type target info) \n   (new-relation source type target info :reverse true)])\n\n\n(defn add-relation \n  ([source type target]\n   (add-relation source type target nil))\n  ([source type target info]\n   ;;make sure nodes exists and create them if they do not\n   (ensure-nodes [source target])\n   (cond (= type :special-type) nil\n         :default (let [[source-rel target-rel] (new-relations source type target info)]\n                    (add-node-relation source source-rel)\n                    (add-node-relation target target-rel)))))\n\n\n(def rel add-relation)\n\n\n\n\n(defn filter-outputs [id f]\n  (filter f (get-node-outs id)))\n\n(defn get-outs-of-type [id type]\n  (filter-outputs id #(= type (:type %))))\n\n(defn has-outs-of-type? [id type] \n  (not (empty?  (get-outs-of-type id type))))\n\n;; functions for working with PATHS \n\n(def test-path [{:source :dog1, :target :dog2, :type :kind-of, :info nil}  \n                {:source :dog2, :target :dog3, :type :kind-of, :info nil}  \n                {:source :dog3, :target :dog4, :type :kind-of, :info nil}  \n                {:source :dog4, :target :dog5, :type :kind-of, :info nil}])\n\n(def other [{:source :dog1, :target :cat, :type :kind-of, :info nil} ])\n\n(defn _test [n]\n  (into [] (take n test-path)))\n\n(defn path-to-key [path]\n  (conj  (into [] (flatten (for [ {:keys [source target type ]} path]\n                             [source type]))) (:target (last path))))\n\n(def searches (atom {}))\n\n(defn clear-searches []\n  (reset! searches {}))\n\n\n\n(def tmp-matches (atom #{}))\n\n(defn clear-matches []\n  (reset! tmp-matches []))\n\n(defn reset-search [] \n  (clear-searches)\n  (clear-matches)) \n\n;; ------------------------------------------------\n;; RELATIONS - dont forget you can specify optional \n;; 4th parameter \"info\"\n\n(rel :dog :kind-of :animal)\n(rel :dog :does-action :bark)\n(rel :cat :kind-of :animal)\n(rel :animal :kind-of :organism)\n(rel :organism :kind-of :living-thing)\n(rel :living-thing :kind-of :thing)\n(rel :dog :kind-of :mammal)\n(rel :mammal :kind-of :organism)\n(rel :dog :<-kind-of :poodle)\n\n\n(defn KIND-OF [path]\n  (= #{:kind-of} (into #{} (map :type path))))\n\n\n;; ---------------------------------------------------------------------------------------------->\n;; a node is a keyword :node-id \n;; a path is an array of maps which looks => [{:source :dog1, :target :dog2, :type :kind-of, :info nil}...] \n;; match-result is the output of the match? fxn \n;; reason is either (strings) T_SIG or NO_OUTS reflecting if there were no outputs or the termination condition \n;; was satisfied \n;; ---------------------------------------------------------------------------------------------->\n\n(defn _register-search [path]\n  (let [path-key (path-to-key path)]\n    (log path-key)\n    (swap! searches assoc-in path-key {})))\n\n(defn _report-match [{:keys [node path]}]\n (let [path-key (path-to-key path)]\n    (log \"FOUND_MATCH::\" path-key)\n    (swap! tmp-matches conj [node path])))\n\n(defn _should-stop? [node path & {:keys [match-result]}]\n  (= 10 (count path)))\n\n(defn length-stopper [num]\n  (fn [node path & {:keys [match-result]}]\n    (= num (count path))))\n\n(defn _match? [node path] \n  (= 4 (count path)))\n\n(defn _get-next-nodes [node path]\n  ;filter them for stuff \n  (get-outs-of-type node :kind-of))\n\n\n(defn _terminate-search [node path & {:keys [match-result reason]}]\n  (let [path-key (path-to-key path)]\n    (log \"TERMINATING::\" path-key \"::\" reason)\n    (swap! searches assoc-in path-key reason)))\n\n\n\n;; ---------------------------------------------------------------------------------------------->\n;; ---------------------------------------------------------------------------------------------->\n\n\n;;allows recursive calling of process-node\n(def node-jump (atom nil))\n\n(defn schedule-node-jump [{:keys [node path out match? should-stop? get-next-nodes report-match terminate-search] :as args}]\n  (let [new-path (conj path out)\n        next-node (:target out) ]\n    ;;process the next node \n    (@node-jump (merge args {:path new-path :node next-node} ))))\n\n(defn schedule-node-jumps [{:keys [node path outs match? should-stop? get-next-nodes report-match terminate-search] :as args}]\n  ;;basically we gotta call process node again (after updating the path)\n  ;;separated it out so that I can potentially do interesting things with threading\n  (doseq [out outs]\n    (schedule-node-jump (merge args {:out out} ))))\n\n(defn process-node [{:keys [node path match? should-stop? get-next-nodes report-match terminate-search register-search] :as args}]\n  ;;first we will register that we are searching this node (for keeping track of progresss, etc \n  (register-search path)\n  ;;now go on \n  (let [result (match? node path)]\n    ;;so we found a path that has satisfied our criteria - we report it \n    (when result \n      (report-match {:node node :path path}))\n    ;;now we need to determine if we should continue or not \n    (if (not (should-stop? node path :match-result result))\n      ;;yes we should - lets schedule the jumps to the next nodes\n      (let [outs (get-next-nodes node path)]\n        (if (not-empty outs)\n          (schedule-node-jumps (merge args {:outs outs} ))\n          ;;no outs left \n          (terminate-search node path :match-result result :reason \"NO_OUTS\")))\n      ;;no we are done \n      (terminate-search node path :match-result result :reason \"T_SIG\"))))\n\n(reset! node-jump process-node)\n\n;;FIND TREES http://clojure.com/blog/2012/05/08/reducers-a-library-and-model-for-collection-processing.html\n\n\n(defn test-search [] \n  (process-node {:node :poodle\n                 :path [] \n                 :match? _match? \n                 :should-stop? (length-stopper 10)\n                 :get-next-nodes _get-next-nodes\n                 :report-match _report-match \n                 :terminate-search _terminate-search \n                 :register-search _register-search}))\n\n\n;; so I would like to explore the possibility of using this framework to \n;; implement general problem solver \n\n;; Thu Nov  2 20:51:49 PDT 2017\n;; going to implement a searcher \n\n(defn kind-of-search [a b]\n  (reset-search)\n  (process-node {:node a\n                 :path [] \n                 :match? (fn [node path]\n                           ;;its a match if b is the target at the end of the path\n                           (= b (:target (last path))))\n                 :should-stop? (length-stopper 10)\n                 :get-next-nodes   (fn [node path] \n                                     (get-outs-of-type node :kind-of))\n                 :report-match _report-match \n                 :terminate-search _terminate-search \n                 :register-search _register-search})\n  (if (not-empty @tmp-matches)\n    true\n    false))\n\n(defn attribute-search [a b]\n  (reset-search) \n  ;;note that the logic is mainly implemented by the match and get-next-node \n  ;;fxns. A thing has an attribute if either it directly has that attribute \n  ;;or is a kind of another thing which has it. To account for both we allow\n  ;;output relations of both kind-of and is\n  (process-node {:node a\n                 :path [] \n                 :match? (fn [node path]\n                           ;;its a match if b is the target at the end of the path\n                           (= b (:target (last path))))\n                 :should-stop? (length-stopper 10)\n                 :get-next-nodes   (fn [node path] \n                                     (set/union \n                                      (get-outs-of-type node :kind-of)\n                                      (get-outs-of-type node :is)))\n                 :report-match _report-match \n                 :terminate-search _terminate-search \n                 :register-search _register-search})\n  (if (not-empty @tmp-matches)\n    true\n    false))\n\n\n\n(defn clean [x] \n  (name x))\n\n(defn describe-rel [{:keys [source target type info]}]\n  (let [ [_source _target] (map clean [source target]) ] \n    (case type \n      :kind-of (str _source \" is a kind of \" _target)\n      :<-kind-of (str _source \" includes the subtype of \" _target)\n      :is      (str _source \" is \" _target)\n      :does-action  (str _source \" does the action \" _target ) \n      nil)))\n\n\n\n\n(defn describe-node [k]\n  (if-let [node (k @node-store)]\n    ;;got it\n    (clojure.string/join \". \" \n                         (remove nil? \n                                 (for [rel (:outs node)]\n                                   (describe-rel rel))))\n    ;;nope \n    (str \"Sorry I dont know about \" (name k))))\n                     \n                   \n;; when input is received it must be matched against known input types \n(defn to-node-name [x] \n  (keyword (clojure.string/join \"-\" \n               (clojure.string/split x \" \"))))\n\n\n(def speak log)\n\n;; THIS IS INTERSTING -- but having the regular expression like this is a bit of a nightmare \n;; and with enough regex it would be inconvenient to debug (the order they are processed in matters)\n;; should have a *smarter* way of determining the INTENT behind the request and translating it into \n;; the proper graph query .... maybe can use natural language processing \n(def match-lib [ \n                [[#\"([^ ]*) is a kind of (.*)\"\n                  #\"a (.*) is a kind of (.*)\"\n                  #\"a (.*) is a (.*)\"          ]      ;; THE ORDER MATTERS HERE!!! lol              \n                 (fn [[_ a b]]\n                   (rel (to-node-name a) :kind-of (to-node-name b))\n                   (speak \"OK\"))]\n                [[#\"([^ ]*) is (.*)\"\n                  #\"a (.*) is (.*)\"]\n                 (fn [[_ a b]]\n                   (rel (to-node-name a) :is (to-node-name b))\n                   (speak \"OK\"))]\n                [#\"tell me about (.*)\"\n                 (fn [[_ x]]\n                   (speak (describe-node (to-node-name x))))]\n                [#\"is a (.*) a kind of (.*)\"\n                 (fn [[_ a b]]\n                   (if (kind-of-search (to-node-name a) (to-node-name b))\n                     (speak \"YES\")\n                     (speak \"NO\")))]\n                [[#\"does (.*) have the attribute (.*)\"\n                  #\"does (.*) have the characteristic (.*)\"\n                  #\"is a (.*) (.*)\"\n                  #\"is (.*) (.*)\"]\n                 (fn [[_ a b]]\n                   (if (attribute-search (to-node-name a) (to-node-name b))\n                     (speak \"YES\")\n                     (speak \"NO\")))]\n                [#\"(why)\"\n                 (fn [_]\n                   (let [match-info (second (first @tmp-matches))]\n                     (speak (clojure.string/join \" and \" \n                                                 (remove nil? \n                                                         (for [rel match-info]\n                                                           (describe-rel rel)))))))]\n                ])\n\n\n(defn get-re-result [re text]\n  ;;try each re in the vector and give nil if none work \n  (if (vector? re)\n    (loop [current (first re)\n           remaining (rest re)]\n      (if current\n        (if-let [result (re-matches current text)]\n          (do\n            (log \"for RE: \" current \" | got result | :: \" result)\n            result)\n          (recur (first remaining) (rest remaining)))\n        ;;no re\n        nil))\n    ;;not a vec \n    (re-matches re text)))\n \n\n(defn run-match [text]\n  ;;we do a loop to find the first match \n  (loop [[re fx] (first match-lib)\n         remaining (rest match-lib)]\n    (if re\n      (if-let [result (get-re-result re text)]\n        ;;got a match! -- so we run its function with the result \n        (do (log \"found match\")\n            (log result)\n            (fx result))\n        ;;no match\n        (recur (first remaining) (rest remaining)))\n      ;;no re\n      (speak \"Sorry I did not understand\"))))\n \n(defn process-input [text]\n  (run-match text))\n\n\n\n\n\n\n\n\n\n(defn js [x]\n  (clj->js x))\n\n(defn fibb [n]\n   (case n \n     1 1 \n     2 1\n     ;default \n     (+ (fibb (- n 1))\n        (fibb (- n 2)))))\n\n(defn fibba [n]  ;;inefficient algorithm ! \n  (map fibb \n       (range 1 (inc n) )))\n","~:reader-features",["^C",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["knowledge-graph.core/m-log","args","msg","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","js/console.log","knowledge-graph.core/verbose","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","knowledge-graph.core/log","seq34897","self__4777__auto__","cljs.core/seq","stuff","knowledge-graph.core/node-store","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","knowledge-graph.core/get-node","id","G__34898","cljs.core/deref","knowledge-graph.core/get-node-outs","knowledge-graph.core/new-node","knowledge-graph.core/add-node","node","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","knowledge-graph.core/node-exists?","knowledge-graph.core/ensure-node","knowledge-graph.core/ensure-nodes","ids","seq__34899","chunk__34900","count__34901","i__34902","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","knowledge-graph.core/add-node-relation","relation","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/conj","knowledge-graph.core/get-rel-type","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core/name","knowledge-graph.core/reverse-relation-type","n","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","knowledge-graph.core/rr","knowledge-graph.core/reverse-relation-info","cljs.core/identity","knowledge-graph.core/new-relation","p__34908","map__34909","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq34903","G__34904","G__34905","G__34906","G__34907","self__4776__auto__","source","type","target","info","reverse","knowledge-graph.core/new-relations","knowledge_graph.core.new_relation.cljs$core$IFn$_invoke$arity$variadic","G__34912","knowledge-graph.core/add-relation","js/Error","knowledge_graph.core.add_relation.cljs$core$IFn$_invoke$arity$4","vec__34913","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","source-rel","target-rel","knowledge-graph.core/rel","knowledge-graph.core/filter-outputs","f","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","knowledge-graph.core/get-outs-of-type","p1__34916#","knowledge-graph.core/has-outs-of-type?","cljs.core/empty?","knowledge-graph.core/test-path","knowledge-graph.core/other","knowledge-graph.core/_test","cljs.core.into.cljs$core$IFn$_invoke$arity$2","knowledge-graph.core/path-to-key","path","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/flatten","iter__4582__auto__","s__34918","cljs.core/LazySeq","c__4580__auto__","size__4581__auto__","b__34920","cljs.core/chunk-buffer","i__34919","map__34921","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__34917","map__34923","cljs.core/cons","cljs.core/rest","cljs.core/last","knowledge-graph.core/searches","knowledge-graph.core/clear-searches","cljs.core/reset!","knowledge-graph.core/tmp-matches","knowledge-graph.core/clear-matches","knowledge-graph.core/reset-search","G__34925","G__34926","G__34927","G__34928","G__34929","G__34930","G__34931","G__34932","G__34933","G__34934","G__34935","G__34936","G__34937","G__34938","G__34939","G__34940","G__34941","G__34942","G__34943","G__34944","G__34945","G__34946","G__34947","G__34948","G__34949","G__34950","G__34951","knowledge-graph.core/KIND-OF","cljs.core.map.cljs$core$IFn$_invoke$arity$2","knowledge-graph.core/_register-search","path-key","knowledge_graph.core.log.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc-in","p__34952","map__34953","knowledge-graph.core/_report-match","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","knowledge-graph.core/_should-stop?","p__34958","map__34959","seq34955","G__34956","G__34957","match-result","knowledge-graph.core/length-stopper","num","p__34961","map__34962","knowledge-graph.core/_match?","knowledge-graph.core/_get-next-nodes","knowledge-graph.core/_terminate-search","p__34967","map__34968","seq34964","G__34965","G__34966","reason","knowledge-graph.core/node-jump","p__34970","map__34971","knowledge-graph.core/schedule-node-jump","out","match?","should-stop?","get-next-nodes","report-match","terminate-search","new-path","next-node","G__34974","fexpr__34973","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__34975","map__34976","knowledge-graph.core/schedule-node-jumps","outs","seq__34978","chunk__34979","count__34980","i__34981","p__34982","map__34983","knowledge-graph.core/process-node","register-search","result","G__34985","cljs.core/not","G__34986","G__34987","G__34988","G__34989","cljs.core/not-empty","G__34990","G__34991","G__34992","G__34993","G__34994","G__34995","G__34996","G__34997","G__34998","G__34999","G__35000","G__35001","knowledge-graph.core/test-search","knowledge-graph.core/kind-of-search","a","b","knowledge-graph.core/attribute-search","clojure.set.union.cljs$core$IFn$_invoke$arity$2","knowledge-graph.core/clean","x","p__35002","map__35003","knowledge-graph.core/describe-rel","vec__35005","_source","_target","G__35008","cljs.core/Keyword","knowledge-graph.core/describe-node","k","temp__5733__auto__","G__35009","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","s__35011","b__35013","i__35012","iter__35010","rel","knowledge-graph.core/to-node-name","clojure.string.split.cljs$core$IFn$_invoke$arity$2","knowledge-graph.core/speak","knowledge-graph.core/match-lib","p__35014","vec__35015","_","G__35018","G__35019","G__35020","p__35021","vec__35022","G__35025","G__35026","G__35027","p__35028","vec__35029","G__35032","p__35033","vec__35034","p__35037","vec__35038","match-info","cljs.core/second","G__35041","s__35043","b__35045","i__35044","iter__35042","knowledge-graph.core/get-re-result","re","text","cljs.core/vector?","current","remaining","cljs.core/re-matches","knowledge-graph.core/run-match","G__35049","vec__35050","vec__35056","fx","knowledge-graph.core/process-input","knowledge-graph.core/js","cljs.core/clj->js","knowledge-graph.core/fibb","G__35059","G__35060","G__35061","knowledge-graph.core/fibba","cljs.core.range.cljs$core$IFn$_invoke$arity$2"]]],"~:cache-keys",["~#cmap",[["^18","goog/dom/tagname.js"],[1581791472000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^C",[]],"~:deps-syms",["^P","~$goog.dom.HtmlElement"]]],["^18","cljs/core/async/impl/ioc_helpers.cljs"],[1581791468000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^O","~$cljs.core.async.impl.protocols"]]],["^18","goog/labs/useragent/platform.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","~$goog.labs.userAgent.util","~$goog.string"]]],["^18","cljs/core/async.cljs"],[1581791468000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^O","^1J","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^18","goog/math/math.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1R","~$goog.asserts"]]],["^18","goog/html/trustedtypes.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","goog/labs/useragent/browser.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1R","^1K","~$goog.object","~$goog.string.internal"]]],["^18","goog/html/safeurl.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1S","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1U"]]],["^18","goog/array/array.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1S"]]],["^18","goog/useragent/useragent.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^1K","~$goog.reflect","^1L"]]],["^18","goog/debug/error.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","knowledge_graph/core.cljs"],[1582107334000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^O","^J","^L","^N"]]],["^18","goog/dom/nodetype.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","goog/string/typedstring.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","goog/object/object.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","goog/dom/asserts.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1S"]]],"~:SHADOW-TIMESTAMP",[1581791475000,1581791472000],["^18","goog/math/long.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1S","^23"]]],["^18","goog/html/trustedresourceurl.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1S","~$goog.html.trustedtypes","^1X","^1Y","^1Z","^1["]]],["^18","cljs/core/async/impl/channels.cljs"],[1581791468000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^O","^1J","^1P","^1N"]]],["^18","goog/string/internal.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","goog/functions/functions.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","cljs/core/async/impl/dispatch.cljs"],[1581791468000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^O","^1N","~$goog.async.nextTick"]]],["^18","goog/html/safestyle.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1R","^1S","~$goog.html.SafeUrl","^1Z","^1[","^1U"]]],["^18","goog/dom/safe.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1S","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^27","^1W","~$goog.html.uncheckedconversions","^1Z","^1U"]]],["^18","cljs/core/async/impl/protocols.cljs"],[1581791468000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^O"]]],["^18","goog/structs/map.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^18","goog/html/safehtml.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1R","^1S","~$goog.dom.TagName","~$goog.dom.tags","^2;","^2<","~$goog.html.SafeStyleSheet","^27","^1W","^25","^1X","^1Y","^20","^1T","^1Z","^1[","^1U"]]],["^18","goog/dom/tags.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1T"]]],["^18","goog/math/size.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","goog/labs/useragent/engine.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1R","^1K","^1L"]]],["^18","goog/dom/dom.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1R","^1S","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^2@","~$goog.dom.safe","^2:","^2=","~$goog.math.Coordinate","~$goog.math.Size","^1T","^1L","~$goog.string.Unicode","~$goog.userAgent"]]],["^18","goog/asserts/asserts.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","~$goog.debug.Error","^2D"]]],["^18","cljs/core/async/impl/buffers.cljs"],[1581791468000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^O","^1J"]]],["^18","goog/uri/uri.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1R","^1S","^1L","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^18","goog/i18n/bidi.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","cljs/core/async/impl/timers.cljs"],[1581791468000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^O","^1J","^1M","^1P"]]],["^18","goog/fs/url.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","goog/base.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",[]]],["^18","goog/structs/structs.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1R","^1T"]]],["^18","clojure/string.cljs"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^O","^1L","~$goog.string.StringBuffer"]]],["^18","goog/debug/entrypointregistry.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1S"]]],["^18","goog/string/string.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^2E","^2=","^1Z","^1U"]]],["^18","goog/reflect/reflect.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","goog/labs/useragent/util.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1U"]]],["^18","goog/string/stringbuffer.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","goog/math/coordinate.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","~$goog.math"]]],["^18","goog/iter/iter.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1R","^1S","^29","^2Q"]]],["^18","goog/async/nexttick.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","~$goog.debug.entryPointRegistry","~$goog.dom","^2@","^2E","^29","^2:","^1W","^20","^21","^1Z"]]],["^18","goog/html/uncheckedconversions.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1S","^2:","^2;","^2<","^2B","^27","^1W","^1Z","^1U"]]],["^18","goog/dom/htmlelement.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P"]]],["^18","cljs/core.cljs"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["~$goog.math.Long","~$goog.math.Integer","^1L","^1T","^1R","~$goog.Uri","^2P"]]],["^18","goog/html/safescript.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1S","^25","^1Z","^1["]]],["^18","goog/html/safestylesheet.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1R","^1S","^2<","^1T","^1Z","^1[","^1U"]]],["^18","goog/math/integer.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^23"]]],["^18","goog/dom/browserfeature.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^2I"]]],["^18","clojure/set.cljs"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^O"]]],["^18","goog/uri/utils.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1R","^1S","^1L"]]],["^18","goog/string/const.js"],[1581791472000,"^1E",["^ ","^1F",null,"^1G",["^C",[]],"^1H",["^P","^1S","^1["]]]]],"~:clj-info",["^ ","jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/core.async/0.6.532/core.async-0.6.532.jar!/clojure/core/async/impl/concurrent.clj",1581791468000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1492109172000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/core.async/0.6.532/core.async-0.6.532.jar!/cljs/core/async/impl/ioc_macros.clj",1581791468000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/core.async/0.6.532/core.async-0.6.532.jar!/cljs/core/async/macros.clj",1581791468000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/core.async/0.6.532/core.async-0.6.532.jar!/cljs/core/async.clj",1581791468000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1556476600000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1556476600000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1556476600000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/core.async/0.6.532/core.async-0.6.532.jar!/clojure/core/async/impl/exec/threadpool.clj",1581791468000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1556476600000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/core.async/0.6.532/core.async-0.6.532.jar!/clojure/core/async/impl/protocols.clj",1581791468000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/core.async/0.6.532/core.async-0.6.532.jar!/clojure/core/async/impl/dispatch.clj",1581791468000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1556476600000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","knowledge_graph/core.cljs","^7",6,"^8",5,"^9",6,"^:",25],"^;",["^ ","^<","^="],"^>",["^ ","^?","^@","^A","^@"],"^B",["^C",[]],"^D","^E","^H",null,"^I",["^ ","^J","^J","^K","^J","^L","^L","^M","^L","^N","^N","^O","^O","^P","^P"],"^Q",["^C",["^R","^S"]],"~:shadow/js-access-global",["^C",["Error"]],"^T",["^ ","^U","^N","^V","^N","^W","^N","^X","^N","^Y","^N","^Z","^N"],"~:defs",["^ ","~$schedule-node-jump",["^ ","~:protocol-inline",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",211,"^8",7,"^9",211,"^:",25,"~:arglists",["^10",["~$quote",["^10",[[["^ ","~:keys",["~$node","~$path","~$out","~$match?","~$should-stop?","~$get-next-nodes","~$report-match","~$terminate-search"],"^13","~$args"]]]]]]],"^D","~$knowledge-graph.core/schedule-node-jump","^6","knowledge_graph/core.cljs","^:",25,"~:method-params",["^10",[["~$p__34970"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",211,"~:ret-tag","~$any","^9",211,"~:max-fixed-arity",1,"~:fn-var",true,"^3P",["^10",["^3Q",["^10",[[["^ ","^3R",["^3S","^3T","^3U","^3V","^3W","^3X","^3Y","^3Z"],"^13","^3["]]]]]]],"~$_match?",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",189,"^8",7,"^9",189,"^:",14,"^3P",["^10",["^3Q",["^10",[["^3S","^3T"]]]]]],"^D","~$knowledge-graph.core/_match?","^6","knowledge_graph/core.cljs","^:",14,"^41",["^10",[["^3S","^3T"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",189,"^46","~$boolean","^9",189,"^48",2,"^49",true,"^3P",["^10",["^3Q",["^10",[["^3S","^3T"]]]]]],"~$reverse-relation-type",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",64,"^8",7,"^9",64,"^:",28,"^3P",["^10",["^3Q",["^10",[["~$id"]]]]]],"^D","~$knowledge-graph.core/reverse-relation-type","^6","knowledge_graph/core.cljs","^:",28,"^41",["^10",[["^4>"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",64,"^46",["^C",["~$cljs.core/Keyword","~$clj-nil"]],"^9",64,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"~$speak",["^ ","^D","~$knowledge-graph.core/speak","^6","knowledge_graph/core.cljs","^7",338,"^8",1,"^9",338,"^:",11,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",338,"^8",6,"^9",338,"^:",11]],"~$get-node",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",28,"^8",7,"^9",28,"^:",15,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"^D","~$knowledge-graph.core/get-node","^6","knowledge_graph/core.cljs","^:",15,"^41",["^10",[["^4>"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",28,"^46","^47","^9",28,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"~$m-log",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",14,"^8",6,"^9",14,"^:",11],"^D","~$knowledge-graph.core/m-log","^6","knowledge_graph/core.cljs","^:",11,"^41",["^10",[["^3["]]],"^43",null,"^44",["^10",[]],"^8",1,"^45",true,"^7",14,"^46","~$js","^9",14,"^48",0,"^49",true,"^3P",null],"~$new-relations",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",82,"^8",7,"^9",82,"^:",20,"^3P",["^10",["^3Q",["^10",[["~$source","~$type","~$target","~$info"]]]]]],"^D","~$knowledge-graph.core/new-relations","^6","knowledge_graph/core.cljs","^:",20,"^41",["^10",[["^4J","^4K","^4L","^4M"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",82,"^46","~$cljs.core/IVector","^9",82,"^48",4,"^49",true,"^3P",["^10",["^3Q",["^10",[["^4J","^4K","^4L","^4M"]]]]]],"~$log",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",21,"^8",7,"^9",21,"^:",10,"^3P",["^10",["^3Q",["^10",[["~$&","~$stuff"]]]]],"~:top-fn",["^ ","^45",true,"~:fixed-arity",0,"^48",0,"^41",[["^10",["^4Q"]]],"^3P",["^10",[["~$&","^4Q"]]],"^44",["^10",[null]]]],"^D","~$knowledge-graph.core/log","^6","knowledge_graph/core.cljs","^:",10,"^4R",["^ ","^45",true,"^4S",0,"^48",0,"^41",[["^10",["^4Q"]]],"^3P",["^10",[["~$&","^4Q"]]],"^44",["^10",[null]]],"^41",[["^10",["^4Q"]]],"^43",null,"^4S",0,"^44",["^10",[null]],"^8",1,"^45",true,"~:methods",[["^ ","^4S",0,"^45",true,"~:tag",["^C",["^47","^4A"]]]],"^7",21,"^46","^47","^9",21,"^48",0,"^49",true,"^3P",["^10",[["~$&","^4Q"]]]],"~$add-node",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",37,"^8",7,"^9",37,"^:",15,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"^D","~$knowledge-graph.core/add-node","^6","knowledge_graph/core.cljs","^:",15,"^41",["^10",[["^4>"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",37,"^46",["^C",[null,"^47"]],"^9",37,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"~$describe-node",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",321,"^8",7,"^9",321,"^:",20,"^3P",["^10",["^3Q",["^10",[["~$k"]]]]]],"^D","~$knowledge-graph.core/describe-node","^6","knowledge_graph/core.cljs","^:",20,"^41",["^10",[["~$k"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",321,"^46","^K","^9",321,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["~$k"]]]]]],"~$has-outs-of-type?",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",110,"^8",7,"^9",110,"^:",24,"^3P",["^10",["^3Q",["^10",[["^4>","^4K"]]]]]],"^D","~$knowledge-graph.core/has-outs-of-type?","^6","knowledge_graph/core.cljs","^:",24,"^41",["^10",[["^4>","^4K"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",110,"^46","^4<","^9",110,"^48",2,"^49",true,"^3P",["^10",["^3Q",["^10",[["^4>","^4K"]]]]]],"~$add-node-relation",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",56,"^8",7,"^9",56,"^:",24,"^3P",["^10",["^3Q",["^10",[["^4>","~$relation"]]]]]],"^D","~$knowledge-graph.core/add-node-relation","^6","knowledge_graph/core.cljs","^:",24,"^41",["^10",[["^4>","^52"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",56,"^46",["^C",[null,"^47"]],"^9",56,"^48",2,"^49",true,"^3P",["^10",["^3Q",["^10",[["^4>","^52"]]]]]],"~$clean",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",306,"^8",7,"^9",306,"^:",12,"^3P",["^10",["^3Q",["^10",[["~$x"]]]]]],"^D","~$knowledge-graph.core/clean","^6","knowledge_graph/core.cljs","^:",12,"^41",["^10",[["~$x"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",306,"^46","^K","^9",306,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["~$x"]]]]]],"~$tmp-matches",["^ ","^D","~$knowledge-graph.core/tmp-matches","^6","knowledge_graph/core.cljs","^7",136,"^8",1,"^9",136,"^:",17,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",136,"^8",6,"^9",136,"^:",17],"^4V","~$cljs.core/Atom"],"~$node-exists?",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",43,"^8",7,"^9",43,"^:",19,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"^D","~$knowledge-graph.core/node-exists?","^6","knowledge_graph/core.cljs","^:",19,"^41",["^10",[["^4>"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",43,"^46","^4<","^9",43,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"~$rel",["^ ","^D","~$knowledge-graph.core/rel","^6","knowledge_graph/core.cljs","^7",99,"^8",1,"^9",99,"^:",9,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",99,"^8",6,"^9",99,"^:",9]],"~$_terminate-search",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",197,"^8",7,"^9",197,"^:",24,"^3P",["^10",["^3Q",["^10",[["^3S","^3T","~$&",["^ ","^3R",["~$match-result","~$reason"]]]]]]],"^4R",["^ ","^45",true,"^4S",2,"^48",2,"^41",[["^10",["^3S","^3T",["^ ","^3R",["^5>","^5?"]]]]],"^3P",["^10",[["^3S","^3T","~$&",["^ ","^3R",["^5>","^5?"]]]]],"^44",["^10",[null]]]],"^D","~$knowledge-graph.core/_terminate-search","^6","knowledge_graph/core.cljs","^:",24,"^4R",["^ ","^45",true,"^4S",2,"^48",2,"^41",[["^10",["^3S","^3T",["^ ","^3R",["^5>","^5?"]]]]],"^3P",["^10",[["^3S","^3T","~$&",["^ ","^3R",["^5>","^5?"]]]]],"^44",["^10",[null]]],"^41",[["^10",["^3S","^3T",["^ ","^3R",["^5>","^5?"]]]]],"^43",null,"^4S",2,"^44",["^10",[null]],"^8",1,"^45",true,"^4U",[["^ ","^4S",2,"^45",true,"^4V",["^C",[null,"^47"]]]],"^7",197,"^46","^47","^9",197,"^48",2,"^49",true,"^3P",["^10",[["^3S","^3T","~$&",["^ ","^3R",["^5>","^5?"]]]]]],"^4H",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",425,"^8",7,"^9",425,"^:",9,"^3P",["^10",["^3Q",["^10",[["~$x"]]]]]],"^D","~$knowledge-graph.core/js","^6","knowledge_graph/core.cljs","^:",9,"^41",["^10",[["~$x"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",425,"^46","^47","^9",425,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["~$x"]]]]]],"~$searches",["^ ","^D","~$knowledge-graph.core/searches","^6","knowledge_graph/core.cljs","^7",129,"^8",1,"^9",129,"^:",14,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",129,"^8",6,"^9",129,"^:",14],"^4V","^58"],"~$process-node",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",223,"^8",7,"^9",223,"^:",19,"^3P",["^10",["^3Q",["^10",[[["^ ","^3R",["^3S","^3T","^3V","^3W","^3X","^3Y","^3Z","~$register-search"],"^13","^3["]]]]]]],"^D","~$knowledge-graph.core/process-node","^6","knowledge_graph/core.cljs","^:",19,"^41",["^10",[["~$p__34982"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",223,"^46",["^C",["^47","^4A"]],"^9",223,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[[["^ ","^3R",["^3S","^3T","^3V","^3W","^3X","^3Y","^3Z","^5E"],"^13","^3["]]]]]]],"~$_register-search",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",172,"^8",7,"^9",172,"^:",23,"^3P",["^10",["^3Q",["^10",[["^3T"]]]]]],"^D","~$knowledge-graph.core/_register-search","^6","knowledge_graph/core.cljs","^:",23,"^41",["^10",[["^3T"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",172,"^46",["^C",[null,"^47"]],"^9",172,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^3T"]]]]]],"~$new-relation",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",74,"^8",7,"^9",74,"^:",19,"^3P",["^10",["^3Q",["^10",[["^4J","^4K","^4L","^4M","~$&",["^ ","^3R",["~$reverse"]]]]]]],"^4R",["^ ","^45",true,"^4S",4,"^48",4,"^41",[["^10",["^4J","^4K","^4L","^4M",["^ ","^3R",["^5K"]]]]],"^3P",["^10",[["^4J","^4K","^4L","^4M","~$&",["^ ","^3R",["^5K"]]]]],"^44",["^10",[null]]]],"^D","~$knowledge-graph.core/new-relation","^6","knowledge_graph/core.cljs","^:",19,"^4R",["^ ","^45",true,"^4S",4,"^48",4,"^41",[["^10",["^4J","^4K","^4L","^4M",["^ ","^3R",["^5K"]]]]],"^3P",["^10",[["^4J","^4K","^4L","^4M","~$&",["^ ","^3R",["^5K"]]]]],"^44",["^10",[null]]],"^41",[["^10",["^4J","^4K","^4L","^4M",["^ ","^3R",["^5K"]]]]],"^43",null,"^4S",4,"^44",["^10",[null]],"^8",1,"^45",true,"^4U",[["^ ","^4S",4,"^45",true,"^4V",["^C",["^47","~$cljs.core/IMap"]]]],"^7",74,"^46","^47","^9",74,"^48",4,"^49",true,"^3P",["^10",[["^4J","^4K","^4L","^4M","~$&",["^ ","^3R",["^5K"]]]]]],"~$_report-match",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",177,"^8",7,"^9",177,"^:",20,"^3P",["^10",["^3Q",["^10",[[["^ ","^3R",["^3S","^3T"]]]]]]]],"^D","~$knowledge-graph.core/_report-match","^6","knowledge_graph/core.cljs","^:",20,"^41",["^10",[["~$p__34952"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",177,"^46",["^C",[null,"^47"]],"^9",177,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[[["^ ","^3R",["^3S","^3T"]]]]]]]],"~$test-search",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",247,"^8",7,"^9",247,"^:",18,"^3P",["^10",["^3Q",["^10",[[]]]]]],"^D","~$knowledge-graph.core/test-search","^6","knowledge_graph/core.cljs","^:",18,"^41",["^10",[[]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",247,"^46",["^C",["^47","^4A"]],"^9",247,"^48",0,"^49",true,"^3P",["^10",["^3Q",["^10",[[]]]]]],"~$KIND-OF",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",160,"^8",7,"^9",160,"^:",14,"^3P",["^10",["^3Q",["^10",[["^3T"]]]]]],"^D","~$knowledge-graph.core/KIND-OF","^6","knowledge_graph/core.cljs","^:",14,"^41",["^10",[["^3T"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",160,"^46","^4<","^9",160,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^3T"]]]]]],"~$get-re-result",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",382,"^8",7,"^9",382,"^:",20,"^3P",["^10",["^3Q",["^10",[["~$re","~$text"]]]]]],"^D","~$knowledge-graph.core/get-re-result","^6","knowledge_graph/core.cljs","^:",20,"^41",["^10",[["^5V","^5W"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",382,"^46",["^C",["~$clj","^4O","^47","~$cljs.core/MetaFn","^4A"]],"^9",382,"^48",2,"^49",true,"^3P",["^10",["^3Q",["^10",[["^5V","^5W"]]]]]],"~$filter-outputs",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",104,"^8",7,"^9",104,"^:",21,"^3P",["^10",["^3Q",["^10",[["^4>","~$f"]]]]]],"^D","~$knowledge-graph.core/filter-outputs","^6","knowledge_graph/core.cljs","^:",21,"^41",["^10",[["^4>","~$f"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",104,"^46","~$cljs.core/LazySeq","^9",104,"^48",2,"^49",true,"^3P",["^10",["^3Q",["^10",[["^4>","~$f"]]]]]],"~$_test",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",122,"^8",7,"^9",122,"^:",12,"^3P",["^10",["^3Q",["^10",[["~$n"]]]]]],"^D","~$knowledge-graph.core/_test","^6","knowledge_graph/core.cljs","^:",12,"^41",["^10",[["~$n"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",122,"^46",["^C",[null,"^5Y","^47"]],"^9",122,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["~$n"]]]]]],"~$reverse-relation-info",["^ ","^D","~$knowledge-graph.core/reverse-relation-info","^6","knowledge_graph/core.cljs","^7",72,"^8",1,"^9",72,"^:",27,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",72,"^8",6,"^9",72,"^:",27]],"~$other",["^ ","^D","~$knowledge-graph.core/other","^6","knowledge_graph/core.cljs","^7",120,"^8",1,"^9",120,"^:",11,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",120,"^8",6,"^9",120,"^:",11],"^4V","^4O"],"~$node-jump",["^ ","^D","~$knowledge-graph.core/node-jump","^6","knowledge_graph/core.cljs","^7",209,"^8",1,"^9",209,"^:",15,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",209,"^8",6,"^9",209,"^:",15],"^4V","^58"],"~$schedule-node-jumps",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",217,"^8",7,"^9",217,"^:",26,"^3P",["^10",["^3Q",["^10",[[["^ ","^3R",["^3S","^3T","~$outs","^3V","^3W","^3X","^3Y","^3Z"],"^13","^3["]]]]]]],"^D","~$knowledge-graph.core/schedule-node-jumps","^6","knowledge_graph/core.cljs","^:",26,"^41",["^10",[["~$p__34975"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",217,"^46","^4A","^9",217,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[[["^ ","^3R",["^3S","^3T","^6;","^3V","^3W","^3X","^3Y","^3Z"],"^13","^3["]]]]]]],"~$describe-rel",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",309,"^8",7,"^9",309,"^:",19,"^3P",["^10",["^3Q",["^10",[[["^ ","^3R",["^4J","^4L","^4K","^4M"]]]]]]]],"^D","~$knowledge-graph.core/describe-rel","^6","knowledge_graph/core.cljs","^:",19,"^41",["^10",[["~$p__35002"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",309,"^9",309,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[[["^ ","^3R",["^4J","^4L","^4K","^4M"]]]]]]]],"~$test-path",["^ ","^D","~$knowledge-graph.core/test-path","^6","knowledge_graph/core.cljs","^7",115,"^8",1,"^9",115,"^:",15,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",115,"^8",6,"^9",115,"^:",15],"^4V","^4O"],"~$add-relation",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",87,"^8",7,"^9",87,"^:",19,"^3P",["^10",["^3Q",["^10",[["^4J","^4K","^4L"],["^4J","^4K","^4L","^4M"]]]]],"^4R",["^ ","^45",false,"^4S",4,"^48",4,"^41",["^10",[["^4J","^4K","^4L"],["^4J","^4K","^4L","^4M"]]],"^3P",["^10",[["^4J","^4K","^4L"],["^4J","^4K","^4L","^4M"]]],"^44",["^10",[null,null]]]],"^D","~$knowledge-graph.core/add-relation","^6","knowledge_graph/core.cljs","^:",19,"^4R",["^ ","^45",false,"^4S",4,"^48",4,"^41",["^10",[["^4J","^4K","^4L"],["^4J","^4K","^4L","^4M"]]],"^3P",["^10",[["^4J","^4K","^4L"],["^4J","^4K","^4L","^4M"]]],"^44",["^10",[null,null]]],"^41",["^10",[["^4J","^4K","^4L"],["^4J","^4K","^4L","^4M"]]],"^43",null,"^4S",4,"^44",["^10",[null,null]],"^8",1,"^45",false,"^4U",[["^ ","^4S",3,"^45",false,"^4V","^47"],["^ ","^4S",4,"^45",false,"^4V",["^C",[null,"^47","^4A"]]]],"^7",87,"^9",87,"^48",4,"^49",true,"^3P",["^10",[["^4J","^4K","^4L"],["^4J","^4K","^4L","^4M"]]]],"~$attribute-search",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",281,"^8",7,"^9",281,"^:",23,"^3P",["^10",["^3Q",["^10",[["~$a","~$b"]]]]]],"^D","~$knowledge-graph.core/attribute-search","^6","knowledge_graph/core.cljs","^:",23,"^41",["^10",[["~$a","~$b"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",281,"^46","^4<","^9",281,"^48",2,"^49",true,"^3P",["^10",["^3Q",["^10",[["~$a","~$b"]]]]]],"~$kind-of-search",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",264,"^8",7,"^9",264,"^:",21,"^3P",["^10",["^3Q",["^10",[["~$a","~$b"]]]]]],"^D","~$knowledge-graph.core/kind-of-search","^6","knowledge_graph/core.cljs","^:",21,"^41",["^10",[["~$a","~$b"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",264,"^46","^4<","^9",264,"^48",2,"^49",true,"^3P",["^10",["^3Q",["^10",[["~$a","~$b"]]]]]],"~$rr",["^ ","^D","~$knowledge-graph.core/rr","^6","knowledge_graph/core.cljs","^7",70,"^8",1,"^9",70,"^:",8,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",70,"^8",6,"^9",70,"^:",8]],"~$_should-stop?",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",182,"^8",7,"^9",182,"^:",20,"^3P",["^10",["^3Q",["^10",[["^3S","^3T","~$&",["^ ","^3R",["^5>"]]]]]]],"^4R",["^ ","^45",true,"^4S",2,"^48",2,"^41",[["^10",["^3S","^3T",["^ ","^3R",["^5>"]]]]],"^3P",["^10",[["^3S","^3T","~$&",["^ ","^3R",["^5>"]]]]],"^44",["^10",[null]]]],"^D","~$knowledge-graph.core/_should-stop?","^6","knowledge_graph/core.cljs","^:",20,"^4R",["^ ","^45",true,"^4S",2,"^48",2,"^41",[["^10",["^3S","^3T",["^ ","^3R",["^5>"]]]]],"^3P",["^10",[["^3S","^3T","~$&",["^ ","^3R",["^5>"]]]]],"^44",["^10",[null]]],"^41",[["^10",["^3S","^3T",["^ ","^3R",["^5>"]]]]],"^43",null,"^4S",2,"^44",["^10",[null]],"^8",1,"^45",true,"^4U",[["^ ","^4S",2,"^45",true,"^4V","^4<"]],"^7",182,"^46","^47","^9",182,"^48",2,"^49",true,"^3P",["^10",[["^3S","^3T","~$&",["^ ","^3R",["^5>"]]]]]],"~$verbose",["^ ","^D","~$knowledge-graph.core/verbose","^6","knowledge_graph/core.cljs","^7",19,"^8",1,"^9",19,"^:",13,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",19,"^8",6,"^9",19,"^:",13],"^4V","^4<"],"~$ensure-nodes",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",52,"^8",7,"^9",52,"^:",19,"^3P",["^10",["^3Q",["^10",[["~$ids"]]]]]],"^D","~$knowledge-graph.core/ensure-nodes","^6","knowledge_graph/core.cljs","^:",19,"^41",["^10",[["^6P"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",52,"^46","^4A","^9",52,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^6P"]]]]]],"~$_get-next-nodes",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",192,"^8",7,"^9",192,"^:",22,"^3P",["^10",["^3Q",["^10",[["^3S","^3T"]]]]]],"^D","~$knowledge-graph.core/_get-next-nodes","^6","knowledge_graph/core.cljs","^:",22,"^41",["^10",[["^3S","^3T"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",192,"^46","^61","^9",192,"^48",2,"^49",true,"^3P",["^10",["^3Q",["^10",[["^3S","^3T"]]]]]],"~$process-input",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",414,"^8",7,"^9",414,"^:",20,"^3P",["^10",["^3Q",["^10",[["^5W"]]]]]],"^D","~$knowledge-graph.core/process-input","^6","knowledge_graph/core.cljs","^:",20,"^41",["^10",[["^5W"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",414,"^46","^47","^9",414,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^5W"]]]]]],"~$clear-matches",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",138,"^8",7,"^9",138,"^:",20,"^3P",["^10",["^3Q",["^10",[[]]]]]],"^D","~$knowledge-graph.core/clear-matches","^6","knowledge_graph/core.cljs","^:",20,"^41",["^10",[[]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",138,"^46",["^C",[null,"^47"]],"^9",138,"^48",0,"^49",true,"^3P",["^10",["^3Q",["^10",[[]]]]]],"~$ensure-node",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",48,"^8",7,"^9",48,"^:",18,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"^D","~$knowledge-graph.core/ensure-node","^6","knowledge_graph/core.cljs","^:",18,"^41",["^10",[["^4>"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",48,"^46",["^C",[null,"^47","^4A"]],"^9",48,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"~$to-node-name",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",333,"^8",7,"^9",333,"^:",19,"^3P",["^10",["^3Q",["^10",[["~$x"]]]]]],"^D","~$knowledge-graph.core/to-node-name","^6","knowledge_graph/core.cljs","^:",19,"^41",["^10",[["~$x"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",333,"^46",["^C",["^4@","^4A"]],"^9",333,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["~$x"]]]]]],"~$get-node-outs",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",31,"^8",7,"^9",31,"^:",20,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"^D","~$knowledge-graph.core/get-node-outs","^6","knowledge_graph/core.cljs","^:",20,"^41",["^10",[["^4>"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",31,"^46","^47","^9",31,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"~$clear-searches",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",131,"^8",7,"^9",131,"^:",21,"^3P",["^10",["^3Q",["^10",[[]]]]]],"^D","~$knowledge-graph.core/clear-searches","^6","knowledge_graph/core.cljs","^:",21,"^41",["^10",[[]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",131,"^46",["^C",[null,"^47"]],"^9",131,"^48",0,"^49",true,"^3P",["^10",["^3Q",["^10",[[]]]]]],"~$fibba",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",436,"^8",7,"^9",436,"^:",12,"^3P",["^10",["^3Q",["^10",[["~$n"]]]]]],"^D","~$knowledge-graph.core/fibba","^6","knowledge_graph/core.cljs","^:",12,"^41",["^10",[["~$n"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",436,"^46","^61","^9",436,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["~$n"]]]]]],"~$match-lib",["^ ","^D","~$knowledge-graph.core/match-lib","^6","knowledge_graph/core.cljs","^7",344,"^8",1,"^9",344,"^:",15,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",344,"^8",6,"^9",344,"^:",15],"^4V","^4O"],"~$run-match",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",399,"^8",7,"^9",399,"^:",16,"^3P",["^10",["^3Q",["^10",[["^5W"]]]]]],"^D","~$knowledge-graph.core/run-match","^6","knowledge_graph/core.cljs","^:",16,"^41",["^10",[["^5W"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",399,"^46","^47","^9",399,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^5W"]]]]]],"~$reset-search",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",141,"^8",7,"^9",141,"^:",19,"^3P",["^10",["^3Q",["^10",[[]]]]]],"^D","~$knowledge-graph.core/reset-search","^6","knowledge_graph/core.cljs","^:",19,"^41",["^10",[[]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",141,"^46",["^C",[null,"^47"]],"^9",141,"^48",0,"^49",true,"^3P",["^10",["^3Q",["^10",[[]]]]]],"~$fibb",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",428,"^8",7,"^9",428,"^:",11,"^3P",["^10",["^3Q",["^10",[["~$n"]]]]]],"^D","~$knowledge-graph.core/fibb","^6","knowledge_graph/core.cljs","^:",11,"^41",["^10",[["~$n"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",428,"^9",428,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["~$n"]]]]]],"~$new-node",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",34,"^8",7,"^9",34,"^:",15,"^3P",["^10",["^3Q",["^10",[[]]]]]],"^D","~$knowledge-graph.core/new-node","^6","knowledge_graph/core.cljs","^:",15,"^41",["^10",[[]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",34,"^46","^5M","^9",34,"^48",0,"^49",true,"^3P",["^10",["^3Q",["^10",[[]]]]]],"~$get-outs-of-type",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",107,"^8",7,"^9",107,"^:",23,"^3P",["^10",["^3Q",["^10",[["^4>","^4K"]]]]]],"^D","~$knowledge-graph.core/get-outs-of-type","^6","knowledge_graph/core.cljs","^:",23,"^41",["^10",[["^4>","^4K"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",107,"^46","^61","^9",107,"^48",2,"^49",true,"^3P",["^10",["^3Q",["^10",[["^4>","^4K"]]]]]],"~$path-to-key",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",125,"^8",7,"^9",125,"^:",18,"^3P",["^10",["^3Q",["^10",[["^3T"]]]]]],"^D","~$knowledge-graph.core/path-to-key","^6","knowledge_graph/core.cljs","^:",18,"^41",["^10",[["^3T"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",125,"^46","^5Y","^9",125,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^3T"]]]]]],"~$length-stopper",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",185,"^8",7,"^9",185,"^:",21,"^3P",["^10",["^3Q",["^10",[["~$num"]]]]]],"^D","~$knowledge-graph.core/length-stopper","^6","knowledge_graph/core.cljs","^:",21,"^41",["^10",[["^7E"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",185,"^46","~$function","^9",185,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^7E"]]]]]],"~$get-rel-type",["^ ","^3O",null,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",59,"^8",7,"^9",59,"^:",19,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"^D","~$knowledge-graph.core/get-rel-type","^6","knowledge_graph/core.cljs","^:",19,"^41",["^10",[["^4>"]]],"^43",null,"^44",["^10",[null,null]],"^8",1,"^45",false,"^7",59,"^46","^4@","^9",59,"^48",1,"^49",true,"^3P",["^10",["^3Q",["^10",[["^4>"]]]]]],"~$node-store",["^ ","^D","~$knowledge-graph.core/node-store","^6","knowledge_graph/core.cljs","^7",26,"^8",1,"^9",26,"^:",16,"^5",["^ ","^6","knowledge_graph/core.cljs","^7",26,"^8",6,"^9",26,"^:",16],"^4V","^58"]],"^S",["^ ","^@","^@","^O","^O","^N","^N"],"~:cljs.analyzer/constants",["^ ","^Q",["^C",["~:path","~:cat","~:dog2","~:does-action","~:organism","~:kind-of","~:match-result","~:dog4","~:<-kind-of","~:is","~:special-type","~:default","~:forward","~:dog","~:report-match","~:poodle","~:register-search","~:backward","~:type","~:mammal","^1<","~:dog3","~:node","~:terminate-search","~:reason","~:get-next-nodes","~:living-thing","~:bark","~:thing","~:out","~:animal","~:info","~:target","~:should-stop?","~:dog1","~:outs","~:match?","~:reverse","~:dog5"]],"~:order",["^8C","^82","^7Y","^8E","^1<","^8@","^83","^8?","^7W","^7X","^8B","^7O","^7R","^85","^7T","^8F","^7N","^7Z","^8>","^7P","^8;","^7Q","^8:","^8<","^84","^7U","^80","^86","^7M","^7S","^88","^8=","^8D","^8A","^89","^7[","^87","^81","^7V"]],"^14",["^ ","^S",["^C",[]],"^R",["^C",[]]],"^15",["^ "],"^16",["^P","^O","^J","^L","^N"]],"^G","^E","~:ns-specs",["^ "],"~:ns-spec-vars",["^C",[]],"~:compiler-options",["^1D",[["^8J","~:static-fns"],true,["^8J","~:shadow-tweaks"],null,["^8J","~:elide-asserts"],false,["^8J","~:optimize-constants"],null,["^8J","^1;"],null,["^8J","~:external-config"],null,["^8J","~:tooling-config"],null,["^8J","~:emit-constants"],null,["^8J","~:load-tests"],null,["^8J","~:form-size-threshold"],null,["^8J","~:infer-externs"],true,["^8J","^1="],null,["~:js-options","~:js-provider"],"^R",["~:mode"],"~:dev",["^8J","~:fn-invoke-direct"],null,["^8J","~:source-map"],"/dev/null"]]]